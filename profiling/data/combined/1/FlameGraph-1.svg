<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>migrate_disable (16,415,380 samples, 0.04%)</title><rect x="925.8" y="149" width="0.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="928.84" y="159.5" ></text>
</g>
<g >
<title>__fget_light (124,284,995 samples, 0.27%)</title><rect x="975.0" y="213" width="3.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="978.05" y="223.5" ></text>
</g>
<g >
<title>mem.indexOfPosLinear__anon_9120 (27,546,812 samples, 0.06%)</title><rect x="1044.9" y="421" width="0.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1047.89" y="431.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (41,405,504 samples, 0.09%)</title><rect x="977.2" y="197" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="980.17" y="207.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (1,377,814,754 samples, 2.99%)</title><rect x="934.2" y="213" width="35.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="937.24" y="223.5" >__..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="517" width="0.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1192.07" y="527.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (20,843,303 samples, 0.05%)</title><rect x="736.1" y="389" width="0.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="739.13" y="399.5" ></text>
</g>
<g >
<title>may_open (144,519,478 samples, 0.31%)</title><rect x="969.6" y="229" width="3.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="972.57" y="239.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).pop (100,395,663 samples, 0.22%)</title><rect x="224.1" y="421" width="2.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="227.08" y="431.5" ></text>
</g>
<g >
<title>mod_memcg_state (16,377,974 samples, 0.04%)</title><rect x="878.3" y="165" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="881.32" y="175.5" ></text>
</g>
<g >
<title>__fdget_pos (340,768,715 samples, 0.74%)</title><rect x="417.1" y="309" width="8.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="420.10" y="319.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (15,683,599 samples, 0.03%)</title><rect x="723.2" y="245" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="726.22" y="255.5" ></text>
</g>
<g >
<title>rcu_core (53,794,250 samples, 0.12%)</title><rect x="1146.3" y="293" width="1.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1149.29" y="303.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_8657.next (13,748,546,167 samples, 29.88%)</title><rect x="331.0" y="421" width="352.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="334.04" y="431.5" >fs.Dir.Iterator__struct_8657.next</text>
</g>
<g >
<title>kmem_cache_alloc (179,913,271 samples, 0.39%)</title><rect x="857.6" y="181" width="4.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="860.62" y="191.5" ></text>
</g>
<g >
<title>do_user_addr_fault (26,990,521 samples, 0.06%)</title><rect x="1187.8" y="245" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1190.82" y="255.5" ></text>
</g>
<g >
<title>copy_from_kernel_nofault_allowed (32,660,012 samples, 0.07%)</title><rect x="923.7" y="117" width="0.8" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="926.70" y="127.5" ></text>
</g>
<g >
<title>terminate_walk (171,417,841 samples, 0.37%)</title><rect x="979.9" y="229" width="4.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="982.93" y="239.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (52,908,286 samples, 0.11%)</title><rect x="734.8" y="357" width="1.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="737.77" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_lock (15,748,138 samples, 0.03%)</title><rect x="838.3" y="245" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="841.27" y="255.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (169,729,258 samples, 0.37%)</title><rect x="646.1" y="261" width="4.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="649.11" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (26,990,521 samples, 0.06%)</title><rect x="1187.8" y="277" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1190.82" y="287.5" ></text>
</g>
<g >
<title>kmem_cache_free (75,708,543 samples, 0.16%)</title><rect x="717.1" y="293" width="1.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="720.09" y="303.5" ></text>
</g>
<g >
<title>handle_softirqs (14,749,269 samples, 0.03%)</title><rect x="969.2" y="149" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="972.20" y="159.5" ></text>
</g>
<g >
<title>call_filldir (788,207,533 samples, 1.71%)</title><rect x="446.4" y="277" width="20.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="449.38" y="287.5" ></text>
</g>
<g >
<title>mem.indexOfSentinel__anon_8725 (1,283,784,229 samples, 2.79%)</title><rect x="375.8" y="357" width="32.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="378.81" y="367.5" >me..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (14,749,269 samples, 0.03%)</title><rect x="969.2" y="197" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="972.20" y="207.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall3 (248,026,688 samples, 0.54%)</title><rect x="18.8" y="501" width="6.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="21.84" y="511.5" ></text>
</g>
<g >
<title>Thread.callFn__anon_7622 (6,180,539,957 samples, 13.43%)</title><rect x="25.2" y="485" width="158.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="28.20" y="495.5" >Thread.callFn__anon_..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (53,794,250 samples, 0.12%)</title><rect x="1146.3" y="357" width="1.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1149.29" y="367.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).addOneAssumeCapacity (68,612,163 samples, 0.15%)</title><rect x="220.0" y="389" width="1.8" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="223.01" y="399.5" ></text>
</g>
<g >
<title>mem.Allocator.allocWithSizeAndAlignment__anon_9638 (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="309" width="1.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1190.82" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,346,676,092 samples, 22.49%)</title><rect x="414.2" y="341" width="265.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="417.24" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>_raw_spin_lock (23,890,841 samples, 0.05%)</title><rect x="560.4" y="149" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="563.43" y="159.5" ></text>
</g>
<g >
<title>mem.indexOfPos__anon_8884 (13,172,190 samples, 0.03%)</title><rect x="1043.6" y="437" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1046.61" y="447.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_8657.nextLinux (13,517,324,105 samples, 29.38%)</title><rect x="336.2" y="405" width="346.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="339.17" y="415.5" >fs.Dir.Iterator__struct_8657.nextLinux</text>
</g>
<g >
<title>kmem_cache_free (14,749,269 samples, 0.03%)</title><rect x="969.2" y="101" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="972.20" y="111.5" ></text>
</g>
<g >
<title>do_sys_openat2 (6,923,707,849 samples, 15.05%)</title><rect x="833.1" y="277" width="177.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="836.10" y="287.5" >do_sys_openat2</text>
</g>
<g >
<title>free_rb_tree_fname (322,322,586 samples, 0.70%)</title><rect x="705.6" y="277" width="8.3" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="708.60" y="287.5" ></text>
</g>
<g >
<title>make_vfsuid (77,712,555 samples, 0.17%)</title><rect x="932.2" y="213" width="2.0" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="935.25" y="223.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).append (190,406,440 samples, 0.41%)</title><rect x="219.2" y="421" width="4.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="222.20" y="431.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (36,073,116 samples, 0.08%)</title><rect x="733.8" y="357" width="1.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="736.84" y="367.5" ></text>
</g>
<g >
<title>verify_dirent_name (142,754,420 samples, 0.31%)</title><rect x="462.9" y="245" width="3.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="465.93" y="255.5" ></text>
</g>
<g >
<title>posix.openatZ (7,997,034,131 samples, 17.38%)</title><rect x="813.4" y="373" width="205.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="816.44" y="383.5" >posix.openatZ</text>
</g>
<g >
<title>posix.toPosixPath (977,991,573 samples, 2.13%)</title><rect x="1018.5" y="405" width="25.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1021.53" y="415.5" >p..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (15,683,599 samples, 0.03%)</title><rect x="723.2" y="261" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="726.22" y="271.5" ></text>
</g>
<g >
<title>acpi_ev_gpe_detect (12,565,356 samples, 0.03%)</title><rect x="730.2" y="181" width="0.3" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="733.20" y="191.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (136,826,222 samples, 0.30%)</title><rect x="332.7" y="405" width="3.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="335.66" y="415.5" ></text>
</g>
<g >
<title>os.linux.close (18,733,977 samples, 0.04%)</title><rect x="690.4" y="405" width="0.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="693.40" y="415.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).ensureTotalCapacity (26,703,459 samples, 0.06%)</title><rect x="233.9" y="405" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="236.87" y="415.5" ></text>
</g>
<g >
<title>strncpy_from_user (297,333,458 samples, 0.65%)</title><rect x="996.1" y="245" width="7.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="999.11" y="255.5" ></text>
</g>
<g >
<title>bpf_lsm_file_open (16,051,219 samples, 0.03%)</title><rect x="927.3" y="165" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="930.33" y="175.5" ></text>
</g>
<g >
<title>compiler_rt.memset.memset (26,753,093 samples, 0.06%)</title><rect x="689.7" y="405" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="692.72" y="415.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (115,762,711 samples, 0.25%)</title><rect x="730.5" y="309" width="3.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="733.52" y="319.5" ></text>
</g>
<g >
<title>mem.isAlignedGeneric__anon_8509 (15,649,571 samples, 0.03%)</title><rect x="386.5" y="341" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="389.49" y="351.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7864 (41,094,844 samples, 0.09%)</title><rect x="368.6" y="389" width="1.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="371.62" y="399.5" ></text>
</g>
<g >
<title>math.isPowerOfTwo__anon_8113 (25,455,141 samples, 0.06%)</title><rect x="1043.0" y="357" width="0.6" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1045.96" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_lock (15,926,284 samples, 0.03%)</title><rect x="544.1" y="165" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="547.12" y="175.5" ></text>
</g>
<g >
<title>combined_runner.linreg_task__anon_8510 (3,990,071,995 samples, 8.67%)</title><rect x="25.2" y="469" width="102.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="28.20" y="479.5" >combined_run..</text>
</g>
<g >
<title>handle_softirqs (16,944,355 samples, 0.04%)</title><rect x="242.9" y="341" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="245.90" y="351.5" ></text>
</g>
<g >
<title>_find_next_zero_bit (97,159,869 samples, 0.21%)</title><rect x="835.8" y="245" width="2.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="838.77" y="255.5" ></text>
</g>
<g >
<title>search_name.searchName (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="453" width="1.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1190.82" y="463.5" ></text>
</g>
<g >
<title>search_name.SearchIterator.next (39,028,980,528 samples, 84.82%)</title><rect x="186.9" y="453" width="1000.9" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="189.90" y="463.5" >search_name.SearchIterator.next</text>
</g>
<g >
<title>__legitimize_path (187,863,857 samples, 0.41%)</title><rect x="900.3" y="197" width="4.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="903.34" y="207.5" ></text>
</g>
<g >
<title>filp_flush (233,213,531 samples, 0.51%)</title><rect x="723.6" y="309" width="6.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="726.62" y="319.5" ></text>
</g>
<g >
<title>fs.Dir.openDirFlagsZ (8,216,319,568 samples, 17.86%)</title><rect x="807.8" y="389" width="210.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="810.82" y="399.5" >fs.Dir.openDirFlagsZ</text>
</g>
<g >
<title>valgrind.doClientRequest (62,722,912 samples, 0.14%)</title><rect x="1041.4" y="309" width="1.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1044.35" y="319.5" ></text>
</g>
<g >
<title>path_init (259,200,718 samples, 0.56%)</title><rect x="973.3" y="229" width="6.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="976.28" y="239.5" ></text>
</g>
<g >
<title>try_to_unlazy (270,846,848 samples, 0.59%)</title><rect x="898.9" y="213" width="6.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="901.88" y="223.5" ></text>
</g>
<g >
<title>ext4_readdir (8,258,713,351 samples, 17.95%)</title><rect x="441.7" y="293" width="211.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="444.69" y="303.5" >ext4_readdir</text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (115,485,251 samples, 0.25%)</title><rect x="816.4" y="341" width="3.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="819.39" y="351.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (27,750,196 samples, 0.06%)</title><rect x="561.0" y="149" width="0.8" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="564.04" y="159.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (18,783,038 samples, 0.04%)</title><rect x="678.2" y="309" width="0.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="681.18" y="319.5" ></text>
</g>
<g >
<title>mem.eql__anon_4894 (4,617,550,356 samples, 10.04%)</title><rect x="1065.3" y="389" width="118.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1068.31" y="399.5" >mem.eql__anon_..</text>
</g>
<g >
<title>__x64_sys_getdents64 (9,964,675,765 samples, 21.66%)</title><rect x="416.1" y="325" width="255.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="419.07" y="335.5" >__x64_sys_getdents64</text>
</g>
<g >
<title>__ext4_check_dir_entry (606,964,892 samples, 1.32%)</title><rect x="475.1" y="245" width="15.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="478.11" y="255.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).append (24,144,289 samples, 0.05%)</title><rect x="188.2" y="437" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="191.16" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="501" width="0.9" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1192.07" y="511.5" ></text>
</g>
<g >
<title>Thread.LinuxThreadImpl.spawn__anon_3812.Instance.entryFn (6,180,539,957 samples, 13.43%)</title><rect x="25.2" y="501" width="158.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="28.20" y="511.5" >Thread.LinuxThreadIm..</text>
</g>
<g >
<title>debug.inValgrind (79,589,949 samples, 0.17%)</title><rect x="1040.9" y="357" width="2.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1043.92" y="367.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (74,424,090 samples, 0.16%)</title><rect x="680.9" y="357" width="1.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="683.92" y="367.5" ></text>
</g>
<g >
<title>inode_query_iversion (60,040,474 samples, 0.13%)</title><rect x="637.7" y="277" width="1.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="640.70" y="287.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall3 (10,595,916,525 samples, 23.03%)</title><rect x="411.1" y="373" width="271.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="414.09" y="383.5" >os.linux.x86_64.syscall3</text>
</g>
<g >
<title>__getblk_gfp (2,160,475,337 samples, 4.70%)</title><rect x="491.3" y="197" width="55.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="494.34" y="207.5" >__get..</text>
</g>
<g >
<title>fsnotify_find_mark (69,505,988 samples, 0.15%)</title><rect x="726.4" y="277" width="1.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="729.41" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (14,861,805 samples, 0.03%)</title><rect x="871.4" y="149" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="874.38" y="159.5" ></text>
</g>
<g >
<title>lockref_put_return (46,669,093 samples, 0.10%)</title><rect x="701.9" y="277" width="1.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="704.85" y="287.5" ></text>
</g>
<g >
<title>handle_softirqs (53,794,250 samples, 0.12%)</title><rect x="1146.3" y="309" width="1.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1149.29" y="319.5" ></text>
</g>
<g >
<title>vfs_open (20,809,549 samples, 0.05%)</title><rect x="984.3" y="229" width="0.6" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="987.32" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (13,862,753 samples, 0.03%)</title><rect x="710.4" y="197" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="713.42" y="207.5" ></text>
</g>
<g >
<title>update_irq_load_avg (24,519,716 samples, 0.05%)</title><rect x="408.1" y="229" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="411.11" y="239.5" ></text>
</g>
<g >
<title>memchr (142,754,420 samples, 0.31%)</title><rect x="462.9" y="229" width="3.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="465.93" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (27,750,196 samples, 0.06%)</title><rect x="561.0" y="133" width="0.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="564.04" y="143.5" ></text>
</g>
<g >
<title>debug.inValgrind (157,361,732 samples, 0.34%)</title><rect x="380.7" y="341" width="4.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="383.72" y="351.5" ></text>
</g>
<g >
<title>valgrind.doClientRequestExpr (62,722,912 samples, 0.14%)</title><rect x="1041.4" y="325" width="1.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1044.35" y="335.5" ></text>
</g>
<g >
<title>linreg.LinReg(20).fit (16,173,533 samples, 0.04%)</title><rect x="127.5" y="469" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="130.53" y="479.5" ></text>
</g>
<g >
<title>debug.assert (20,771,049 samples, 0.05%)</title><rect x="380.2" y="341" width="0.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="383.19" y="351.5" ></text>
</g>
<g >
<title>rcu_core (15,683,599 samples, 0.03%)</title><rect x="723.2" y="213" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="726.22" y="223.5" ></text>
</g>
<g >
<title>__common_interrupt (12,565,356 samples, 0.03%)</title><rect x="730.2" y="277" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="733.20" y="287.5" ></text>
</g>
<g >
<title>handle_softirqs (15,683,599 samples, 0.03%)</title><rect x="723.2" y="229" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="726.22" y="239.5" ></text>
</g>
<g >
<title>rcu_do_batch (15,683,599 samples, 0.03%)</title><rect x="723.2" y="197" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="726.22" y="207.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).addOne (68,612,163 samples, 0.15%)</title><rect x="220.0" y="405" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="223.01" y="415.5" ></text>
</g>
<g >
<title>dnotify_flush (94,677,053 samples, 0.21%)</title><rect x="725.8" y="293" width="2.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="728.77" y="303.5" ></text>
</g>
<g >
<title>dput (132,065,329 samples, 0.29%)</title><rect x="980.6" y="213" width="3.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="983.60" y="223.5" ></text>
</g>
<g >
<title>hook_file_alloc_security (26,438,366 samples, 0.06%)</title><rect x="856.9" y="181" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="859.95" y="191.5" ></text>
</g>
<g >
<title>__call_rcu_common (218,162,529 samples, 0.47%)</title><rect x="694.5" y="309" width="5.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="697.53" y="319.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (120,877,776 samples, 0.26%)</title><rect x="230.1" y="389" width="3.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="233.07" y="399.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (580,319,432 samples, 1.26%)</title><rect x="581.1" y="213" width="14.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="584.08" y="223.5" ></text>
</g>
<g >
<title>rcu_do_batch (27,750,196 samples, 0.06%)</title><rect x="561.0" y="69" width="0.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="564.04" y="79.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (7,564,020,051 samples, 16.44%)</title><rect x="822.2" y="341" width="194.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="825.21" y="351.5" >os.linux.x86_64.syscall4</text>
</g>
<g >
<title>fsnotify (17,267,882 samples, 0.04%)</title><rect x="437.2" y="277" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="440.17" y="287.5" ></text>
</g>
<g >
<title>cache_from_obj (15,683,599 samples, 0.03%)</title><rect x="723.2" y="165" width="0.4" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="726.22" y="175.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (15,243,814 samples, 0.03%)</title><rect x="874.5" y="181" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="877.52" y="191.5" ></text>
</g>
<g >
<title>handle_softirqs (24,519,716 samples, 0.05%)</title><rect x="408.1" y="277" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="411.11" y="287.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (62,232,841 samples, 0.14%)</title><rect x="746.5" y="389" width="1.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="749.52" y="399.5" ></text>
</g>
<g >
<title>get_unused_fd_flags (25,927,751 samples, 0.06%)</title><rect x="986.8" y="261" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="989.80" y="271.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7864 (159,305,396 samples, 0.35%)</title><rect x="1183.7" y="389" width="4.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1186.73" y="399.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (111,661,134 samples, 0.24%)</title><rect x="183.7" y="453" width="2.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="186.71" y="463.5" ></text>
</g>
<g >
<title>mem.eqlBytes (166,572,860 samples, 0.36%)</title><rect x="357.5" y="373" width="4.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="360.53" y="383.5" ></text>
</g>
<g >
<title>inode_permission (14,765,681 samples, 0.03%)</title><rect x="931.9" y="213" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="934.87" y="223.5" ></text>
</g>
<g >
<title>__ext4fs_dirhash (1,039,385,530 samples, 2.26%)</title><rect x="604.3" y="229" width="26.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="607.32" y="239.5" >_..</text>
</g>
<g >
<title>down_read_killable (158,727,085 samples, 0.34%)</title><rect x="437.6" y="293" width="4.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="440.62" y="303.5" ></text>
</g>
<g >
<title>acpi_hw_gpe_read (12,565,356 samples, 0.03%)</title><rect x="730.2" y="149" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="733.20" y="159.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (78,344,705 samples, 0.17%)</title><rect x="594.0" y="197" width="2.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="596.96" y="207.5" ></text>
</g>
<g >
<title>mutex_lock (64,601,869 samples, 0.14%)</title><rect x="424.2" y="293" width="1.6" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="427.18" y="303.5" ></text>
</g>
<g >
<title>kfree (19,829,912 samples, 0.04%)</title><rect x="636.5" y="261" width="0.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="639.47" y="271.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (13,403,584 samples, 0.03%)</title><rect x="1147.3" y="261" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1150.33" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (274,892,295 samples, 0.60%)</title><rect x="10.0" y="485" width="7.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>ext4_htree_store_dirent (1,566,065,309 samples, 3.40%)</title><rect x="561.8" y="245" width="40.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="564.75" y="255.5" >ext..</text>
</g>
<g >
<title>search_name.SearchIterator.init (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="437" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1190.82" y="447.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (23,281,767 samples, 0.05%)</title><rect x="995.5" y="229" width="0.6" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="998.51" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="485" width="0.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1192.07" y="495.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (64,319,668 samples, 0.14%)</title><rect x="1010.7" y="293" width="1.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1013.67" y="303.5" ></text>
</g>
<g >
<title>valgrind.runningOnValgrind (79,589,949 samples, 0.17%)</title><rect x="1040.9" y="341" width="2.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1043.92" y="351.5" ></text>
</g>
<g >
<title>valgrind.runningOnValgrind (132,861,329 samples, 0.29%)</title><rect x="381.3" y="325" width="3.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="384.35" y="335.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (26,633,237 samples, 0.06%)</title><rect x="868.0" y="197" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="871.01" y="207.5" ></text>
</g>
<g >
<title>__fget_light (183,918,556 samples, 0.40%)</title><rect x="419.5" y="293" width="4.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="422.47" y="303.5" ></text>
</g>
<g >
<title>do_dentry_open (881,383,003 samples, 1.92%)</title><rect x="905.8" y="229" width="22.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="908.82" y="239.5" >d..</text>
</g>
<g >
<title>c.clone (45,382,988,786 samples, 98.63%)</title><rect x="25.2" y="517" width="1163.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="28.20" y="527.5" >c.clone</text>
</g>
<g >
<title>acpi_ev_detect_gpe (12,565,356 samples, 0.03%)</title><rect x="730.2" y="165" width="0.3" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="733.20" y="175.5" ></text>
</g>
<g >
<title>__find_get_block (2,160,475,337 samples, 4.70%)</title><rect x="491.3" y="181" width="55.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="494.34" y="191.5" >__fin..</text>
</g>
<g >
<title>error_entry (22,034,016 samples, 0.05%)</title><rect x="1188.5" y="277" width="0.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1191.51" y="287.5" ></text>
</g>
<g >
<title>mntput (25,406,456 samples, 0.06%)</title><rect x="719.0" y="293" width="0.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="722.03" y="303.5" ></text>
</g>
<g >
<title>expand_files (15,969,090 samples, 0.03%)</title><rect x="838.7" y="245" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="841.67" y="255.5" ></text>
</g>
<g >
<title>htree_dirblock_to_tree (6,319,614,400 samples, 13.73%)</title><rect x="468.9" y="261" width="162.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="471.91" y="271.5" >htree_dirblock_to_tree</text>
</g>
<g >
<title>__memcpy (157,443,351 samples, 0.34%)</title><rect x="596.4" y="229" width="4.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="599.36" y="239.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (15,783,920 samples, 0.03%)</title><rect x="350.8" y="389" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="353.75" y="399.5" ></text>
</g>
<g >
<title>getname_flags.part.0 (634,344,074 samples, 1.38%)</title><rect x="987.5" y="261" width="16.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="990.47" y="271.5" ></text>
</g>
<g >
<title>rcu_segcblist_enqueue (24,030,704 samples, 0.05%)</title><rect x="699.5" y="293" width="0.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="702.50" y="303.5" ></text>
</g>
<g >
<title>lookup_fast (1,377,814,754 samples, 2.99%)</title><rect x="934.2" y="229" width="35.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="937.24" y="239.5" >lo..</text>
</g>
<g >
<title>mntput_no_expire (12,969,614 samples, 0.03%)</title><rect x="984.0" y="213" width="0.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="986.99" y="223.5" ></text>
</g>
<g >
<title>fs.Dir.close (2,220,704,468 samples, 4.83%)</title><rect x="683.6" y="421" width="57.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="686.63" y="431.5" >fs.Dir..</text>
</g>
<g >
<title>obj_cgroup_charge (42,981,134 samples, 0.09%)</title><rect x="877.6" y="197" width="1.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="880.64" y="207.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (14,749,269 samples, 0.03%)</title><rect x="969.2" y="181" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="972.20" y="191.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (3,311,667,541 samples, 7.20%)</title><rect x="244.0" y="421" width="85.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="247.03" y="431.5" >compiler_..</text>
</g>
<g >
<title>___slab_alloc (131,827,435 samples, 0.29%)</title><rect x="864.2" y="197" width="3.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="867.20" y="207.5" ></text>
</g>
<g >
<title>ext4_map_blocks (584,926,190 samples, 1.27%)</title><rect x="546.7" y="197" width="15.1" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="549.75" y="207.5" ></text>
</g>
<g >
<title>array_list.addOrOom (33,878,343 samples, 0.07%)</title><rect x="242.5" y="405" width="0.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="245.46" y="415.5" ></text>
</g>
<g >
<title>mem.eqlBytes (2,997,262,401 samples, 6.51%)</title><rect x="1070.8" y="373" width="76.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1073.81" y="383.5" >mem.eqlB..</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (1,555,483,177 samples, 3.38%)</title><rect x="749.4" y="405" width="39.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="752.42" y="415.5" >com..</text>
</g>
<g >
<title>copy_from_kernel_nofault (81,017,453 samples, 0.18%)</title><rect x="922.5" y="133" width="2.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="925.46" y="143.5" ></text>
</g>
<g >
<title>exc_page_fault (26,990,521 samples, 0.06%)</title><rect x="1187.8" y="261" width="0.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1190.82" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (15,667,914 samples, 0.03%)</title><rect x="18.4" y="485" width="0.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="21.44" y="495.5" ></text>
</g>
<g >
<title>debug.assert (27,261,025 samples, 0.06%)</title><rect x="243.3" y="405" width="0.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="246.33" y="415.5" ></text>
</g>
<g >
<title>rb_first_postorder (15,999,392 samples, 0.03%)</title><rect x="713.5" y="261" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="716.45" y="271.5" ></text>
</g>
<g >
<title>__kmem_cache_free (81,292,945 samples, 0.18%)</title><rect x="631.9" y="261" width="2.0" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="634.86" y="271.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendAssumeCapacity (136,495,872 samples, 0.30%)</title><rect x="234.6" y="421" width="3.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="237.56" y="431.5" ></text>
</g>
<g >
<title>free_rb_tree_fname (262,135,781 samples, 0.57%)</title><rect x="631.0" y="277" width="6.7" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="633.98" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_close (1,383,691,407 samples, 3.01%)</title><rect x="694.1" y="325" width="35.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="697.12" y="335.5" >__x..</text>
</g>
<g >
<title>xas_start (67,630,877 samples, 0.15%)</title><rect x="542.4" y="117" width="1.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="545.39" y="127.5" ></text>
</g>
<g >
<title>path_openat (5,261,303,242 samples, 11.43%)</title><rect x="849.9" y="245" width="135.0" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="852.93" y="255.5" >path_openat</text>
</g>
<g >
<title>update_wall_time (13,862,753 samples, 0.03%)</title><rect x="710.4" y="133" width="0.4" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="713.42" y="143.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).ensureTotalCapacity (27,411,520 samples, 0.06%)</title><rect x="233.2" y="389" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="236.17" y="399.5" ></text>
</g>
<g >
<title>make_vfsgid (32,942,837 samples, 0.07%)</title><rect x="662.8" y="261" width="0.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="665.82" y="271.5" ></text>
</g>
<g >
<title>debug.assert (47,524,833 samples, 0.10%)</title><rect x="236.8" y="389" width="1.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="239.84" y="399.5" ></text>
</g>
<g >
<title>handle_softirqs (27,750,196 samples, 0.06%)</title><rect x="561.0" y="101" width="0.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="564.04" y="111.5" ></text>
</g>
<g >
<title>debug.assert (15,645,058 samples, 0.03%)</title><rect x="232.8" y="373" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="235.77" y="383.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).ensureUnusedCapacity (80,094,636 samples, 0.17%)</title><rect x="241.3" y="421" width="2.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="244.28" y="431.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (13,862,753 samples, 0.03%)</title><rect x="710.4" y="149" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="713.42" y="159.5" ></text>
</g>
<g >
<title>lockref_get_not_dead (164,404,342 samples, 0.36%)</title><rect x="900.9" y="181" width="4.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="903.94" y="191.5" ></text>
</g>
<g >
<title>security_file_alloc (230,908,262 samples, 0.50%)</title><rect x="856.3" y="197" width="5.9" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="859.32" y="207.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (121,018,914 samples, 0.26%)</title><rect x="915.9" y="213" width="3.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="918.91" y="223.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (39,255,097 samples, 0.09%)</title><rect x="1010.7" y="277" width="1.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1013.67" y="287.5" ></text>
</g>
<g >
<title>__fput (790,371,257 samples, 1.72%)</title><rect x="700.1" y="309" width="20.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="703.12" y="319.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (13,160,812 samples, 0.03%)</title><rect x="552.2" y="149" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="555.17" y="159.5" ></text>
</g>
<g >
<title>posix.errno__anon_7363 (102,771,059 samples, 0.22%)</title><rect x="736.7" y="389" width="2.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="739.66" y="399.5" ></text>
</g>
<g >
<title>atime_needs_update (184,802,795 samples, 0.40%)</title><rect x="660.5" y="277" width="4.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="663.55" y="287.5" ></text>
</g>
<g >
<title>[unknown] (592,811,296 samples, 1.29%)</title><rect x="10.0" y="517" width="15.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>mem.indexOfPosLinear__anon_9120 (5,455,377,507 samples, 11.86%)</title><rect x="1047.9" y="405" width="139.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1050.91" y="415.5" >mem.indexOfPosLin..</text>
</g>
<g >
<title>housekeeping_test_cpu (86,433,542 samples, 0.19%)</title><rect x="544.5" y="165" width="2.2" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="547.53" y="175.5" ></text>
</g>
<g >
<title>hook_file_open (26,689,728 samples, 0.06%)</title><rect x="927.7" y="197" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="930.74" y="207.5" ></text>
</g>
<g >
<title>x64_sys_call (26,440,779 samples, 0.06%)</title><rect x="1012.3" y="293" width="0.7" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1015.32" y="303.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (26,888,578 samples, 0.06%)</title><rect x="924.5" y="149" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="927.54" y="159.5" ></text>
</g>
<g >
<title>rcu_async_should_hurry (14,337,171 samples, 0.03%)</title><rect x="699.1" y="293" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="702.14" y="303.5" ></text>
</g>
<g >
<title>kmem_cache_free (15,683,599 samples, 0.03%)</title><rect x="723.2" y="181" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="726.22" y="191.5" ></text>
</g>
<g >
<title>handle_softirqs (14,861,805 samples, 0.03%)</title><rect x="871.4" y="117" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="874.38" y="127.5" ></text>
</g>
<g >
<title>mutex_unlock (68,763,544 samples, 0.15%)</title><rect x="669.9" y="309" width="1.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="672.86" y="319.5" ></text>
</g>
<g >
<title>linreg.LinReg(20).fit (793,831,473 samples, 1.73%)</title><rect x="96.8" y="453" width="20.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="99.85" y="463.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (15,581,050 samples, 0.03%)</title><rect x="861.5" y="165" width="0.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="864.47" y="175.5" ></text>
</g>
<g >
<title>xas_descend (203,332,344 samples, 0.44%)</title><rect x="537.2" y="117" width="5.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="540.18" y="127.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (16,944,355 samples, 0.04%)</title><rect x="242.9" y="293" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="245.90" y="303.5" ></text>
</g>
<g >
<title>__bpf_prog_enter (40,119,411 samples, 0.09%)</title><rect x="925.2" y="165" width="1.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="928.23" y="175.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (53,794,250 samples, 0.12%)</title><rect x="1146.3" y="325" width="1.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1149.29" y="335.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).ensureTotalCapacity (17,501,286 samples, 0.04%)</title><rect x="221.8" y="405" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="224.77" y="415.5" ></text>
</g>
<g >
<title>kfree (25,084,028 samples, 0.05%)</title><rect x="713.9" y="277" width="0.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="716.86" y="287.5" ></text>
</g>
<g >
<title>bpf_lsm_file_open (263,361,598 samples, 0.57%)</title><rect x="921.0" y="197" width="6.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="923.99" y="207.5" ></text>
</g>
<g >
<title>mem.eqlBytes (14,017,936 samples, 0.03%)</title><rect x="351.2" y="389" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="354.16" y="399.5" ></text>
</g>
<g >
<title>mem.alignForward__anon_3584 (15,747,863 samples, 0.03%)</title><rect x="375.4" y="357" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="378.41" y="367.5" ></text>
</g>
<g >
<title>acpi_irq (12,565,356 samples, 0.03%)</title><rect x="730.2" y="213" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="733.20" y="223.5" ></text>
</g>
<g >
<title>build_open_flags (64,962,545 samples, 0.14%)</title><rect x="839.1" y="261" width="1.6" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="842.08" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (7,212,448,954 samples, 15.68%)</title><rect x="828.0" y="309" width="185.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="831.03" y="319.5" >do_syscall_64</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).ensureTotalCapacityPrecise (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="357" width="1.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1190.82" y="367.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (53,794,250 samples, 0.12%)</title><rect x="1146.3" y="341" width="1.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1149.29" y="351.5" ></text>
</g>
<g >
<title>os.linux.close (1,764,110,374 samples, 3.83%)</title><rect x="690.9" y="389" width="45.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="693.88" y="399.5" >os.l..</text>
</g>
<g >
<title>_raw_spin_lock (81,089,847 samples, 0.18%)</title><rect x="721.5" y="293" width="2.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="724.54" y="303.5" ></text>
</g>
<g >
<title>mem.eql__anon_4894 (667,114,809 samples, 1.45%)</title><rect x="351.5" y="389" width="17.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="354.52" y="399.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (25,288,870 samples, 0.05%)</title><rect x="240.2" y="405" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="243.23" y="415.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (656,833,176 samples, 1.43%)</title><rect x="188.8" y="437" width="16.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="191.78" y="447.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (58,320,003 samples, 0.13%)</title><rect x="225.2" y="405" width="1.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="228.16" y="415.5" ></text>
</g>
<g >
<title>combined_runner (46,011,883,826 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >combined_runner</text>
</g>
<g >
<title>rcu_do_batch (14,749,269 samples, 0.03%)</title><rect x="969.2" y="117" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="972.20" y="127.5" ></text>
</g>
<g >
<title>__put_user_8 (58,251,583 samples, 0.13%)</title><rect x="425.8" y="309" width="1.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="428.84" y="319.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (344,784,608 samples, 0.75%)</title><rect x="10.0" y="501" width="8.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (170,861,116 samples, 0.37%)</title><rect x="673.8" y="309" width="4.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="676.80" y="319.5" ></text>
</g>
<g >
<title>__srcu_read_lock (69,505,988 samples, 0.15%)</title><rect x="726.4" y="245" width="1.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="729.41" y="255.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOne (238,847,399 samples, 0.52%)</title><rect x="227.7" y="405" width="6.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="230.75" y="415.5" ></text>
</g>
<g >
<title>__check_block_validity.constprop.0 (193,004,698 samples, 0.42%)</title><rect x="547.6" y="181" width="4.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="550.55" y="191.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (16,944,355 samples, 0.04%)</title><rect x="242.9" y="373" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="245.90" y="383.5" ></text>
</g>
<g >
<title>mod_objcg_state (14,749,269 samples, 0.03%)</title><rect x="969.2" y="85" width="0.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="972.20" y="95.5" ></text>
</g>
<g >
<title>debug.assert (15,772,893 samples, 0.03%)</title><rect x="240.9" y="405" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="243.87" y="415.5" ></text>
</g>
<g >
<title>migrate_enable (26,181,191 samples, 0.06%)</title><rect x="926.7" y="149" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="929.66" y="159.5" ></text>
</g>
<g >
<title>__kmem_cache_free (139,846,973 samples, 0.30%)</title><rect x="706.4" y="261" width="3.6" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="709.40" y="271.5" ></text>
</g>
<g >
<title>__mmput (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="437" width="0.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1192.07" y="447.5" ></text>
</g>
<g >
<title>ext4fs_dirhash (1,133,399,111 samples, 2.46%)</title><rect x="601.9" y="245" width="29.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="604.91" y="255.5" >ex..</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendSliceAssumeCapacity (125,549,028 samples, 0.27%)</title><rect x="238.1" y="421" width="3.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="241.06" y="431.5" ></text>
</g>
<g >
<title>mod_objcg_state (106,341,331 samples, 0.23%)</title><rect x="874.9" y="181" width="2.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="877.91" y="191.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (14,861,805 samples, 0.03%)</title><rect x="871.4" y="133" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="874.38" y="143.5" ></text>
</g>
<g >
<title>posix.errno__anon_7363 (51,108,352 samples, 0.11%)</title><rect x="1017.2" y="357" width="1.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1020.22" y="367.5" ></text>
</g>
<g >
<title>compiler_rt.memset.memset (207,687,132 samples, 0.45%)</title><rect x="789.3" y="405" width="5.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="792.31" y="415.5" ></text>
</g>
<g >
<title>rcu_core (27,750,196 samples, 0.06%)</title><rect x="561.0" y="85" width="0.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="564.04" y="95.5" ></text>
</g>
<g >
<title>__slab_free (30,927,496 samples, 0.07%)</title><rect x="710.0" y="261" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="712.98" y="271.5" ></text>
</g>
<g >
<title>generic_permission (19,352,043 samples, 0.04%)</title><rect x="972.8" y="197" width="0.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="975.78" y="207.5" ></text>
</g>
<g >
<title>mem.indexOfPos__anon_8884 (5,545,765,576 samples, 12.05%)</title><rect x="1045.6" y="421" width="142.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1048.59" y="431.5" >mem.indexOfPos__an..</text>
</g>
<g >
<title>os.linux.getdents64 (10,626,677,095 samples, 23.10%)</title><rect x="410.3" y="389" width="272.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="413.30" y="399.5" >os.linux.getdents64</text>
</g>
<g >
<title>mem.indexOfScalar__anon_7169 (734,925,134 samples, 1.60%)</title><rect x="1024.8" y="389" width="18.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1027.77" y="399.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (111,186,358 samples, 0.24%)</title><rect x="235.2" y="405" width="2.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="238.21" y="415.5" ></text>
</g>
<g >
<title>lockref_get (53,994,465 samples, 0.12%)</title><rect x="919.0" y="213" width="1.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="922.01" y="223.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (13,862,753 samples, 0.03%)</title><rect x="710.4" y="213" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="713.42" y="223.5" ></text>
</g>
<g >
<title>rb_next (118,098,449 samples, 0.26%)</title><rect x="650.5" y="277" width="3.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="653.46" y="287.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (13,862,753 samples, 0.03%)</title><rect x="710.4" y="181" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="713.42" y="191.5" ></text>
</g>
<g >
<title>__fsnotify_parent (32,014,196 samples, 0.07%)</title><rect x="436.8" y="293" width="0.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="439.80" y="303.5" ></text>
</g>
<g >
<title>__memset (108,281,526 samples, 0.24%)</title><rect x="992.7" y="229" width="2.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="995.73" y="239.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (52,088,082 samples, 0.11%)</title><rect x="679.6" y="357" width="1.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="682.59" y="367.5" ></text>
</g>
<g >
<title>try_to_wake_up (24,519,716 samples, 0.05%)</title><rect x="408.1" y="261" width="0.6" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="411.11" y="271.5" ></text>
</g>
<g >
<title>math.isPowerOfTwo__anon_8113 (22,472,874 samples, 0.05%)</title><rect x="374.8" y="357" width="0.6" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="377.83" y="367.5" ></text>
</g>
<g >
<title>lock_vma_under_rcu (26,990,521 samples, 0.06%)</title><rect x="1187.8" y="229" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1190.82" y="239.5" ></text>
</g>
<g >
<title>__kmalloc (1,133,180,114 samples, 2.46%)</title><rect x="567.3" y="229" width="29.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="570.30" y="239.5" >__..</text>
</g>
<g >
<title>valgrind.doClientRequest (92,250,268 samples, 0.20%)</title><rect x="382.4" y="293" width="2.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="385.39" y="303.5" ></text>
</g>
<g >
<title>should_failslab (14,204,080 samples, 0.03%)</title><rect x="861.9" y="165" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="864.87" y="175.5" ></text>
</g>
<g >
<title>alloc_fd (186,151,001 samples, 0.40%)</title><rect x="834.3" y="261" width="4.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="837.30" y="271.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (87,999,521 samples, 0.19%)</title><rect x="559.5" y="165" width="2.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="562.49" y="175.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (13,775,581 samples, 0.03%)</title><rect x="733.5" y="309" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="736.49" y="319.5" ></text>
</g>
<g >
<title>fsnotify (26,186,206 samples, 0.06%)</title><rect x="918.3" y="197" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="921.34" y="207.5" ></text>
</g>
<g >
<title>__bpf_prog_exit (41,841,351 samples, 0.09%)</title><rect x="926.3" y="165" width="1.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="929.26" y="175.5" ></text>
</g>
<g >
<title>fs.Dir.Walker.next (32,675,888,178 samples, 71.02%)</title><rect x="205.6" y="437" width="838.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="208.62" y="447.5" >fs.Dir.Walker.next</text>
</g>
<g >
<title>os.linux.errnoFromSyscall (12,842,194 samples, 0.03%)</title><rect x="410.0" y="389" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="412.98" y="399.5" ></text>
</g>
<g >
<title>debug.assert (26,595,093 samples, 0.06%)</title><rect x="385.8" y="293" width="0.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="388.81" y="303.5" ></text>
</g>
<g >
<title>rcu_do_batch (14,861,805 samples, 0.03%)</title><rect x="871.4" y="85" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="874.38" y="95.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (189,644,154 samples, 0.41%)</title><rect x="673.8" y="325" width="4.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="676.80" y="335.5" ></text>
</g>
<g >
<title>kmalloc_trace (200,438,975 samples, 0.44%)</title><rect x="645.3" y="277" width="5.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="648.32" y="287.5" ></text>
</g>
<g >
<title>[unknown] (134,695,905 samples, 0.29%)</title><rect x="921.8" y="165" width="3.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="924.77" y="175.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (26,066,918 samples, 0.06%)</title><rect x="905.2" y="197" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="908.15" y="207.5" ></text>
</g>
<g >
<title>kmalloc_slab (15,329,171 samples, 0.03%)</title><rect x="596.0" y="213" width="0.4" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="598.97" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (16,944,355 samples, 0.04%)</title><rect x="242.9" y="389" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="245.90" y="399.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7864 (1,405,995,850 samples, 3.06%)</title><rect x="1147.7" y="373" width="36.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1150.67" y="383.5" >mem..</text>
</g>
<g >
<title>acpi_os_read_port (12,565,356 samples, 0.03%)</title><rect x="730.2" y="133" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="733.20" y="143.5" ></text>
</g>
<g >
<title>mem.Allocator.allocAdvancedWithRetAddr (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="325" width="1.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1190.82" y="335.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (129,538,292 samples, 0.28%)</title><rect x="730.5" y="325" width="3.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="733.52" y="335.5" ></text>
</g>
<g >
<title>__filemap_get_folio (1,035,218,469 samples, 2.25%)</title><rect x="517.6" y="165" width="26.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="520.58" y="175.5" >_..</text>
</g>
<g >
<title>do_filp_open (5,619,378,453 samples, 12.21%)</title><rect x="840.7" y="261" width="144.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="843.74" y="271.5" >do_filp_open</text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (25,064,571 samples, 0.05%)</title><rect x="1011.7" y="277" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1014.67" y="287.5" ></text>
</g>
<g >
<title>memcg_account_kmem (16,377,974 samples, 0.04%)</title><rect x="878.3" y="181" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="881.32" y="191.5" ></text>
</g>
<g >
<title>dput (46,669,093 samples, 0.10%)</title><rect x="701.9" y="293" width="1.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="704.85" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (14,861,805 samples, 0.03%)</title><rect x="871.4" y="165" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="874.38" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (54,224,399 samples, 0.12%)</title><rect x="17.0" y="485" width="1.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="20.05" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,362,963,748 samples, 22.52%)</title><rect x="413.8" y="357" width="265.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="416.82" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>fsnotify (130,808,603 samples, 0.28%)</title><rect x="657.2" y="277" width="3.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="660.19" y="287.5" ></text>
</g>
<g >
<title>rcu_do_batch (16,944,355 samples, 0.04%)</title><rect x="242.9" y="309" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="245.90" y="319.5" ></text>
</g>
<g >
<title>fs.Dir.iterateAssumeFirstIteration (293,691,831 samples, 0.64%)</title><rect x="740.6" y="421" width="7.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="743.58" y="431.5" ></text>
</g>
<g >
<title>unmap_page_range (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="389" width="0.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1192.07" y="399.5" ></text>
</g>
<g >
<title>__mod_memcg_state (16,377,974 samples, 0.04%)</title><rect x="878.3" y="149" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="881.32" y="159.5" ></text>
</g>
<g >
<title>mem.eqlBytes (25,394,265 samples, 0.06%)</title><rect x="1064.7" y="389" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1067.66" y="399.5" ></text>
</g>
<g >
<title>fs.Dir.openDirZ (8,730,384,299 samples, 18.97%)</title><rect x="794.6" y="405" width="223.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="797.64" y="415.5" >fs.Dir.openDirZ</text>
</g>
<g >
<title>fd_install (75,789,909 samples, 0.16%)</title><rect x="984.9" y="261" width="1.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="987.86" y="271.5" ></text>
</g>
<g >
<title>init_file (413,394,504 samples, 0.90%)</title><rect x="851.6" y="213" width="10.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="854.64" y="223.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).ensureTotalCapacity (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="373" width="1.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1190.82" y="383.5" ></text>
</g>
<g >
<title>__memset (14,677,104 samples, 0.03%)</title><rect x="861.1" y="165" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="864.10" y="175.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (84,910,826 samples, 0.18%)</title><rect x="671.6" y="325" width="2.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="674.62" y="335.5" ></text>
</g>
<g >
<title>get_obj_cgroup_from_current (119,421,378 samples, 0.26%)</title><rect x="868.7" y="197" width="3.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="871.70" y="207.5" ></text>
</g>
<g >
<title>file_ra_state_init (29,599,584 samples, 0.06%)</title><rect x="914.0" y="213" width="0.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="917.03" y="223.5" ></text>
</g>
<g >
<title>fsnotify (43,767,561 samples, 0.10%)</title><rect x="914.8" y="213" width="1.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="917.78" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (248,026,688 samples, 0.54%)</title><rect x="18.8" y="485" width="6.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="21.84" y="495.5" ></text>
</g>
<g >
<title>valgrind.doClientRequestExpr (132,861,329 samples, 0.29%)</title><rect x="381.3" y="309" width="3.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="384.35" y="319.5" ></text>
</g>
<g >
<title>up_read (178,332,119 samples, 0.39%)</title><rect x="665.3" y="293" width="4.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="668.29" y="303.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (16,944,355 samples, 0.04%)</title><rect x="242.9" y="357" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="245.90" y="367.5" ></text>
</g>
<g >
<title>rcu_do_batch (40,802,156 samples, 0.09%)</title><rect x="1146.6" y="277" width="1.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1149.63" y="287.5" ></text>
</g>
<g >
<title>xas_load (442,816,594 samples, 0.96%)</title><rect x="532.8" y="133" width="11.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="535.77" y="143.5" ></text>
</g>
<g >
<title>_raw_read_lock (51,220,182 samples, 0.11%)</title><rect x="557.5" y="165" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="560.52" y="175.5" ></text>
</g>
<g >
<title>ext4_sb_block_valid (193,004,698 samples, 0.42%)</title><rect x="547.6" y="165" width="4.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="550.55" y="175.5" ></text>
</g>
<g >
<title>valgrind.runningOnValgrind (34,524,322 samples, 0.08%)</title><rect x="409.1" y="357" width="0.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="412.09" y="367.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (360,566,629 samples, 0.78%)</title><rect x="552.5" y="181" width="9.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="555.50" y="191.5" ></text>
</g>
<g >
<title>mem.indexOfScalarPos__anon_7243 (33,943,107 samples, 0.07%)</title><rect x="1023.9" y="389" width="0.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1026.90" y="399.5" ></text>
</g>
<g >
<title>down_read_trylock (26,990,521 samples, 0.06%)</title><rect x="1187.8" y="213" width="0.7" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1190.82" y="223.5" ></text>
</g>
<g >
<title>mem.alignBackward__anon_8817 (26,595,093 samples, 0.06%)</title><rect x="385.8" y="309" width="0.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="388.81" y="319.5" ></text>
</g>
<g >
<title>security_file_open (313,130,257 samples, 0.68%)</title><rect x="920.4" y="213" width="8.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="923.40" y="223.5" ></text>
</g>
<g >
<title>debug.assert (25,455,141 samples, 0.06%)</title><rect x="1043.0" y="341" width="0.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1045.96" y="351.5" ></text>
</g>
<g >
<title>handle_irq_event (12,565,356 samples, 0.03%)</title><rect x="730.2" y="245" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="733.20" y="255.5" ></text>
</g>
<g >
<title>touch_atime (184,802,795 samples, 0.40%)</title><rect x="660.5" y="293" width="4.8" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="663.55" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,566,176,477 samples, 3.40%)</title><rect x="693.7" y="341" width="40.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="696.68" y="351.5" >do_..</text>
</g>
<g >
<title>close_fd_get_file (81,089,847 samples, 0.18%)</title><rect x="721.5" y="309" width="2.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="724.54" y="319.5" ></text>
</g>
<g >
<title>locks_remove_posix (54,826,809 samples, 0.12%)</title><rect x="728.2" y="293" width="1.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="731.20" y="303.5" ></text>
</g>
<g >
<title>ext4_htree_fill_tree (6,409,937,089 samples, 13.93%)</title><rect x="466.6" y="277" width="164.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="469.59" y="287.5" >ext4_htree_fill_tree</text>
</g>
<g >
<title>syscall_return_via_sysret (46,184,660 samples, 0.10%)</title><rect x="1015.0" y="325" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1018.01" y="335.5" ></text>
</g>
<g >
<title>mem.indexOfSentinel__anon_8725 (18,550,851 samples, 0.04%)</title><rect x="374.4" y="373" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="377.36" y="383.5" ></text>
</g>
<g >
<title>x64_sys_call (36,040,659 samples, 0.08%)</title><rect x="678.7" y="325" width="0.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="681.66" y="335.5" ></text>
</g>
<g >
<title>compiler_rt.stack_probe.zig_probe_stack (81,227,611 samples, 0.18%)</title><rect x="329.0" y="421" width="2.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="331.96" y="431.5" ></text>
</g>
<g >
<title>do_exit (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="453" width="0.9" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1192.07" y="463.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (1,733,447,695 samples, 3.77%)</title><rect x="691.7" y="373" width="44.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="694.67" y="383.5" >os.l..</text>
</g>
<g >
<title>ext4_release_dir (446,815,190 samples, 0.97%)</title><rect x="703.0" y="293" width="11.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="706.05" y="303.5" ></text>
</g>
<g >
<title>__fput_sync (44,903,777 samples, 0.10%)</title><rect x="720.4" y="309" width="1.1" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="723.39" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,583,880,479 samples, 3.44%)</title><rect x="693.2" y="357" width="40.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="696.23" y="367.5" >ent..</text>
</g>
<g >
<title>mem.isAligned (26,595,093 samples, 0.06%)</title><rect x="385.8" y="341" width="0.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="388.81" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (15,143,063 samples, 0.03%)</title><rect x="413.4" y="357" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="416.44" y="367.5" ></text>
</g>
<g >
<title>rcu_core (14,861,805 samples, 0.03%)</title><rect x="871.4" y="101" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="874.38" y="111.5" ></text>
</g>
<g >
<title>is_dx_dir (236,933,016 samples, 0.51%)</title><rect x="639.2" y="277" width="6.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="642.24" y="287.5" ></text>
</g>
<g >
<title>filemap_get_entry (1,008,863,819 samples, 2.19%)</title><rect x="518.3" y="149" width="25.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="521.25" y="159.5" >f..</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).shrinkRetainingCapacity (27,261,025 samples, 0.06%)</title><rect x="243.3" y="421" width="0.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="246.33" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_free (174,303,132 samples, 0.38%)</title><rect x="1003.7" y="261" width="4.5" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1006.73" y="271.5" ></text>
</g>
<g >
<title>fs.Dir.openDir (11,522,356,303 samples, 25.04%)</title><rect x="748.1" y="421" width="295.5" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="751.12" y="431.5" >fs.Dir.openDir</text>
</g>
<g >
<title>percpu_counter_add_batch (785,258,788 samples, 1.71%)</title><rect x="878.7" y="213" width="20.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="881.74" y="223.5" ></text>
</g>
<g >
<title>exit_mmap (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="421" width="0.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1192.07" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (643,383,516 samples, 1.40%)</title><rect x="862.2" y="213" width="16.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="865.24" y="223.5" ></text>
</g>
<g >
<title>rcu_core (14,749,269 samples, 0.03%)</title><rect x="969.2" y="133" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="972.20" y="143.5" ></text>
</g>
<g >
<title>rcu_core (16,944,355 samples, 0.04%)</title><rect x="242.9" y="325" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="245.90" y="335.5" ></text>
</g>
<g >
<title>slab_update_freelist.isra.0 (27,750,196 samples, 0.06%)</title><rect x="561.0" y="37" width="0.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="564.04" y="47.5" ></text>
</g>
<g >
<title>fs.Dir.walk (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="421" width="1.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1190.82" y="431.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (35,909,797 samples, 0.08%)</title><rect x="729.6" y="325" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="732.60" y="335.5" ></text>
</g>
<g >
<title>__slab_free (98,580,699 samples, 0.21%)</title><rect x="633.9" y="261" width="2.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="636.95" y="271.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (24,519,716 samples, 0.05%)</title><rect x="408.1" y="309" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="411.11" y="319.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (15,683,599 samples, 0.03%)</title><rect x="723.2" y="277" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="726.22" y="287.5" ></text>
</g>
<g >
<title>mem.lenSliceTo__anon_8456 (1,370,316,592 samples, 2.98%)</title><rect x="374.8" y="373" width="35.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="377.83" y="383.5" >me..</text>
</g>
<g >
<title>mem.doNotOptimizeAway__anon_8520 (115,667,159 samples, 0.25%)</title><rect x="124.6" y="453" width="2.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="127.56" y="463.5" ></text>
</g>
<g >
<title>posix.close (1,887,724,736 samples, 4.10%)</title><rect x="690.9" y="405" width="48.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="693.88" y="415.5" >posi..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (13,862,753 samples, 0.03%)</title><rect x="710.4" y="229" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="713.42" y="239.5" ></text>
</g>
<g >
<title>Thread.LinuxThreadImpl.spawn__anon_3920.Instance.entryFn (39,202,448,829 samples, 85.20%)</title><rect x="183.7" y="501" width="1005.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="186.71" y="511.5" >Thread.LinuxThreadImpl.spawn__anon_3920.Instance.entryFn</text>
</g>
<g >
<title>iterate_dir (9,311,000,235 samples, 20.24%)</title><rect x="431.1" y="309" width="238.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="434.07" y="319.5" >iterate_dir</text>
</g>
<g >
<title>filldir64 (674,478,603 samples, 1.47%)</title><rect x="449.3" y="261" width="17.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="452.30" y="271.5" ></text>
</g>
<g >
<title>tick_sched_timer (13,862,753 samples, 0.03%)</title><rect x="710.4" y="165" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="713.42" y="175.5" ></text>
</g>
<g >
<title>mem.Allocator.alignedAlloc__anon_9401 (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="341" width="1.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1190.82" y="351.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (24,519,716 samples, 0.05%)</title><rect x="408.1" y="293" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="411.11" y="303.5" ></text>
</g>
<g >
<title>[[x_tables]] (263,361,598 samples, 0.57%)</title><rect x="921.0" y="181" width="6.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="923.99" y="191.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (229,134,510 samples, 0.50%)</title><rect x="871.8" y="197" width="5.8" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="874.76" y="207.5" ></text>
</g>
<g >
<title>__brelse (51,385,946 samples, 0.11%)</title><rect x="473.8" y="245" width="1.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="476.79" y="255.5" ></text>
</g>
<g >
<title>__memset (16,746,692 samples, 0.04%)</title><rect x="867.6" y="197" width="0.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="870.58" y="207.5" ></text>
</g>
<g >
<title>lockref_put_return (13,835,647 samples, 0.03%)</title><rect x="983.6" y="197" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="986.64" y="207.5" ></text>
</g>
<g >
<title>os.linux.openat (7,675,351,895 samples, 16.68%)</title><rect x="819.4" y="357" width="196.8" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="822.35" y="367.5" >os.linux.openat</text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (226,667,243 samples, 0.49%)</title><rect x="928.4" y="229" width="5.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="931.43" y="239.5" ></text>
</g>
<g >
<title>mem.eql__anon_4894 (23,828,153 samples, 0.05%)</title><rect x="1047.3" y="405" width="0.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1050.30" y="415.5" ></text>
</g>
<g >
<title>linreg.LinReg(20).predict (286,932,459 samples, 0.62%)</title><rect x="117.2" y="453" width="7.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="120.21" y="463.5" ></text>
</g>
<g >
<title>fput (66,077,462 samples, 0.14%)</title><rect x="978.2" y="213" width="1.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="981.23" y="223.5" ></text>
</g>
<g >
<title>__check_object_size (165,490,946 samples, 0.36%)</title><rect x="999.5" y="229" width="4.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1002.49" y="239.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (24,519,716 samples, 0.05%)</title><rect x="408.1" y="325" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="411.11" y="335.5" ></text>
</g>
<g >
<title>Thread.callFn__anon_7624 (39,202,448,829 samples, 85.20%)</title><rect x="183.7" y="485" width="1005.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="186.71" y="495.5" >Thread.callFn__anon_7624</text>
</g>
<g >
<title>handle_fasteoi_irq (12,565,356 samples, 0.03%)</title><rect x="730.2" y="261" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="733.20" y="271.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (72,877,028 samples, 0.16%)</title><rect x="222.2" y="405" width="1.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="225.21" y="415.5" ></text>
</g>
<g >
<title>mem.doNotOptimizeAway__anon_8520 (491,103,948 samples, 1.07%)</title><rect x="171.1" y="469" width="12.6" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="174.11" y="479.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (27,750,196 samples, 0.06%)</title><rect x="561.0" y="117" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="564.04" y="127.5" ></text>
</g>
<g >
<title>__x64_sys_openat (7,036,483,565 samples, 15.29%)</title><rect x="830.2" y="293" width="180.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="833.21" y="303.5" >__x64_sys_openat</text>
</g>
<g >
<title>[unknown] (115,485,251 samples, 0.25%)</title><rect x="816.4" y="357" width="3.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="819.39" y="367.5" ></text>
</g>
<g >
<title>simd.firstTrue__anon_8115 (13,787,304 samples, 0.03%)</title><rect x="408.7" y="357" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="411.74" y="367.5" ></text>
</g>
<g >
<title>acpi_ev_sci_xrupt_handler (12,565,356 samples, 0.03%)</title><rect x="730.2" y="197" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="733.20" y="207.5" ></text>
</g>
<g >
<title>alloc_empty_file (1,842,036,808 samples, 4.00%)</title><rect x="851.6" y="229" width="47.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="854.64" y="239.5" >allo..</text>
</g>
<g >
<title>fs.Dir.iterateImpl (109,357,547 samples, 0.24%)</title><rect x="745.3" y="405" width="2.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="748.31" y="415.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (184,334,284 samples, 0.40%)</title><rect x="740.6" y="405" width="4.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="743.58" y="415.5" ></text>
</g>
<g >
<title>asm_common_interrupt (12,565,356 samples, 0.03%)</title><rect x="730.2" y="309" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="733.20" y="319.5" ></text>
</g>
<g >
<title>timekeeping_advance (13,862,753 samples, 0.03%)</title><rect x="710.4" y="117" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="713.42" y="127.5" ></text>
</g>
<g >
<title>mntput_no_expire (12,788,940 samples, 0.03%)</title><rect x="719.7" y="293" width="0.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="722.68" y="303.5" ></text>
</g>
<g >
<title>rcu_accelerate_cbs (12,992,094 samples, 0.03%)</title><rect x="1146.3" y="277" width="0.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1149.29" y="287.5" ></text>
</g>
<g >
<title>update_rq_clock (24,519,716 samples, 0.05%)</title><rect x="408.1" y="245" width="0.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="411.11" y="255.5" ></text>
</g>
<g >
<title>mem.indexOf__anon_8672 (5,609,792,000 samples, 12.19%)</title><rect x="1044.0" y="437" width="143.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1046.95" y="447.5" >mem.indexOf__anon_..</text>
</g>
<g >
<title>__rcu_read_unlock (12,788,940 samples, 0.03%)</title><rect x="719.7" y="277" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="722.68" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7,248,716,484 samples, 15.75%)</title><rect x="827.1" y="325" width="185.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="830.10" y="335.5" >entry_SYSCALL_64_after_h..</text>
</g>
<g >
<title>cache_from_obj (36,580,844 samples, 0.08%)</title><rect x="718.1" y="277" width="0.9" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="721.09" y="287.5" ></text>
</g>
<g >
<title>compiler_rt.memset.memset (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="293" width="1.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1190.82" y="303.5" ></text>
</g>
<g >
<title>security_file_free (14,819,617 samples, 0.03%)</title><rect x="720.0" y="293" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="723.01" y="303.5" ></text>
</g>
<g >
<title>__check_heap_object (26,447,340 samples, 0.06%)</title><rect x="999.9" y="213" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1002.95" y="223.5" ></text>
</g>
<g >
<title>combined_runner.search_task__anon_8522 (39,202,448,829 samples, 85.20%)</title><rect x="183.7" y="469" width="1005.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="186.71" y="479.5" >combined_runner.search_task__anon_8522</text>
</g>
<g >
<title>bpf_probe_read_kernel (107,807,327 samples, 0.23%)</title><rect x="921.8" y="149" width="2.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="924.77" y="159.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (40,091,282 samples, 0.09%)</title><rect x="1016.2" y="357" width="1.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1019.19" y="367.5" ></text>
</g>
<g >
<title>all (46,011,883,826 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (78,559,298 samples, 0.17%)</title><rect x="1013.0" y="325" width="2.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1015.99" y="335.5" ></text>
</g>
<g >
<title>debug.assert (41,180,431 samples, 0.09%)</title><rect x="384.8" y="325" width="1.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="387.75" y="335.5" ></text>
</g>
<g >
<title>fput (145,808,226 samples, 0.32%)</title><rect x="427.3" y="309" width="3.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="430.33" y="319.5" ></text>
</g>
<g >
<title>linreg.LinReg(20).predict (1,683,190,481 samples, 3.66%)</title><rect x="127.9" y="469" width="43.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="130.95" y="479.5" >linr..</text>
</g>
<g >
<title>os.linux.getdents64 (31,244,099 samples, 0.07%)</title><rect x="682.8" y="405" width="0.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="685.83" y="415.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (12,565,356 samples, 0.03%)</title><rect x="730.2" y="229" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="733.20" y="239.5" ></text>
</g>
<g >
<title>_raw_read_unlock (25,582,128 samples, 0.06%)</title><rect x="558.8" y="165" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="561.84" y="175.5" ></text>
</g>
<g >
<title>rb_insert_color (59,110,419 samples, 0.13%)</title><rect x="600.4" y="229" width="1.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="603.40" y="239.5" ></text>
</g>
<g >
<title>str2hashbuf_signed (358,776,240 samples, 0.78%)</title><rect x="621.8" y="213" width="9.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="624.78" y="223.5" ></text>
</g>
<g >
<title>ext4_bread (2,745,401,527 samples, 5.97%)</title><rect x="491.3" y="229" width="70.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="494.34" y="239.5" >ext4_br..</text>
</g>
<g >
<title>__list_del_entry_valid_or_report (23,315,311 samples, 0.05%)</title><rect x="867.0" y="165" width="0.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="869.99" y="175.5" ></text>
</g>
<g >
<title>debug.assert (15,512,102 samples, 0.03%)</title><rect x="813.0" y="373" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="816.05" y="383.5" ></text>
</g>
<g >
<title>simd.firstTrue__anon_8115 (851,747,474 samples, 1.85%)</title><rect x="386.9" y="341" width="21.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="389.89" y="351.5" >s..</text>
</g>
<g >
<title>__ext4_read_dirblock (2,771,337,464 samples, 6.02%)</title><rect x="490.7" y="245" width="71.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="493.68" y="255.5" >__ext4_r..</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).append (308,054,746 samples, 0.67%)</title><rect x="226.7" y="421" width="7.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="229.66" y="431.5" ></text>
</g>
<g >
<title>fs.Dir.Walker.next (12,782,630 samples, 0.03%)</title><rect x="186.6" y="453" width="0.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="189.57" y="463.5" ></text>
</g>
<g >
<title>__memset (72,123,470 samples, 0.16%)</title><rect x="592.1" y="197" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="595.11" y="207.5" ></text>
</g>
<g >
<title>kfree (104,387,187 samples, 0.23%)</title><rect x="710.8" y="261" width="2.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="713.78" y="271.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (14,749,269 samples, 0.03%)</title><rect x="969.2" y="165" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="972.20" y="175.5" ></text>
</g>
<g >
<title>fsnotify (118,108,321 samples, 0.26%)</title><rect x="653.5" y="293" width="3.0" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="656.49" y="303.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (157,110,870 samples, 0.34%)</title><rect x="656.5" y="293" width="4.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="659.52" y="303.5" ></text>
</g>
<g >
<title>mem.isAlignedGeneric__anon_8509 (26,595,093 samples, 0.06%)</title><rect x="385.8" y="325" width="0.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="388.81" y="335.5" ></text>
</g>
<g >
<title>debug.assert (16,858,320 samples, 0.04%)</title><rect x="221.3" y="373" width="0.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="224.33" y="383.5" ></text>
</g>
<g >
<title>mark_page_accessed (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="373" width="0.9" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1192.07" y="383.5" ></text>
</g>
<g >
<title>__virt_addr_valid (121,221,018 samples, 0.26%)</title><rect x="1000.6" y="213" width="3.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1003.62" y="223.5" ></text>
</g>
<g >
<title>mem.indexOfScalarPos__anon_7243 (709,238,744 samples, 1.54%)</title><rect x="1025.4" y="373" width="18.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1028.42" y="383.5" ></text>
</g>
<g >
<title>mem.sliceTo__anon_7397 (1,571,322,689 samples, 3.42%)</title><rect x="369.7" y="389" width="40.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="372.68" y="399.5" >mem..</text>
</g>
<g >
<title>__get_obj_cgroup_from_memcg (93,247,721 samples, 0.20%)</title><rect x="869.4" y="181" width="2.4" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="872.37" y="191.5" ></text>
</g>
<g >
<title>make_vfsuid (63,080,508 samples, 0.14%)</title><rect x="663.7" y="261" width="1.6" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="666.67" y="271.5" ></text>
</g>
<g >
<title>posix.errno__anon_7363 (50,206,846 samples, 0.11%)</title><rect x="739.3" y="405" width="1.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="742.30" y="415.5" ></text>
</g>
<g >
<title>__slab_free (27,750,196 samples, 0.06%)</title><rect x="561.0" y="53" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="564.04" y="63.5" ></text>
</g>
<g >
<title>get_partial_node.part.0 (36,312,794 samples, 0.08%)</title><rect x="866.7" y="181" width="0.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="869.65" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (272,061,970 samples, 0.59%)</title><rect x="989.1" y="245" width="7.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="992.13" y="255.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (152,463,624 samples, 0.33%)</title><rect x="1020.0" y="389" width="3.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1022.99" y="399.5" ></text>
</g>
<g >
<title>unmap_vmas (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="405" width="0.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1192.07" y="415.5" ></text>
</g>
<g >
<title>math.isPowerOfTwo__anon_8113 (41,180,431 samples, 0.09%)</title><rect x="384.8" y="341" width="1.0" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="387.75" y="351.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).addOne (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="389" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1190.82" y="399.5" ></text>
</g>
<g >
<title>inode_permission (37,118,370 samples, 0.08%)</title><rect x="972.3" y="213" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="975.33" y="223.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (19,851,209 samples, 0.04%)</title><rect x="423.7" y="277" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="426.67" y="287.5" ></text>
</g>
<g >
<title>__slab_free (14,861,805 samples, 0.03%)</title><rect x="871.4" y="69" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="874.38" y="79.5" ></text>
</g>
<g >
<title>fsnotify (100,642,481 samples, 0.22%)</title><rect x="714.5" y="293" width="2.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="717.51" y="303.5" ></text>
</g>
<g >
<title>fsnotify_grab_connector (69,505,988 samples, 0.15%)</title><rect x="726.4" y="261" width="1.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="729.41" y="271.5" ></text>
</g>
<g >
<title>__kmem_cache_free (58,194,216 samples, 0.13%)</title><rect x="704.1" y="277" width="1.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="707.11" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (13,862,753 samples, 0.03%)</title><rect x="710.4" y="245" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="713.42" y="255.5" ></text>
</g>
<g >
<title>do_group_exit (35,900,181 samples, 0.08%)</title><rect x="1189.1" y="469" width="0.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1192.07" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (115,485,251 samples, 0.25%)</title><rect x="816.4" y="325" width="3.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="819.39" y="335.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7864 (265,995,635 samples, 0.58%)</title><rect x="361.8" y="373" width="6.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="364.80" y="383.5" ></text>
</g>
<g >
<title>putname (96,034,530 samples, 0.21%)</title><rect x="1008.2" y="261" width="2.5" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1011.20" y="271.5" ></text>
</g>
<g >
<title>common_interrupt (12,565,356 samples, 0.03%)</title><rect x="730.2" y="293" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="733.20" y="303.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).append (49,024,537 samples, 0.11%)</title><rect x="1187.8" y="405" width="1.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1190.82" y="415.5" ></text>
</g>
<g >
<title>ext4_getblk (2,745,401,527 samples, 5.97%)</title><rect x="491.3" y="213" width="70.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="494.34" y="223.5" >ext4_ge..</text>
</g>
<g >
<title>__rcu_read_lock (77,089,659 samples, 0.17%)</title><rect x="981.7" y="197" width="1.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="984.66" y="207.5" ></text>
</g>
<g >
<title>__fdget_raw (15,842,417 samples, 0.03%)</title><rect x="974.6" y="213" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="977.64" y="223.5" ></text>
</g>
<g >
<title>rb_next_postorder (28,033,927 samples, 0.06%)</title><rect x="637.0" y="261" width="0.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="639.98" y="271.5" ></text>
</g>
<g >
<title>complete_walk (270,846,848 samples, 0.59%)</title><rect x="898.9" y="229" width="6.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="901.88" y="239.5" ></text>
</g>
</g>
</svg>
