<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>percpu_counter_add_batch (14,847,534 samples, 0.09%)</title><rect x="477.5" y="149" width="1.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="480.46" y="159.5" ></text>
</g>
<g >
<title>atime_needs_update (31,243,687 samples, 0.20%)</title><rect x="573.4" y="261" width="2.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="576.39" y="271.5" ></text>
</g>
<g >
<title>mem.eql__anon_5137 (1,890,339,673 samples, 12.02%)</title><rect x="1048.2" y="373" width="141.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1051.21" y="383.5" >mem.eql__anon_5137</text>
</g>
<g >
<title>fs.Dir.openDirFlagsZ (2,849,549,308 samples, 18.11%)</title><rect x="701.7" y="373" width="213.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="704.72" y="383.5" >fs.Dir.openDirFlagsZ</text>
</g>
<g >
<title>valgrind.runningOnValgrind (71,260,821 samples, 0.45%)</title><rect x="257.4" y="309" width="5.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="260.37" y="319.5" ></text>
</g>
<g >
<title>try_to_unlazy (96,452,667 samples, 0.61%)</title><rect x="774.2" y="197" width="7.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="777.17" y="207.5" ></text>
</g>
<g >
<title>fs.Dir.iterateAssumeFirstIteration (104,834,281 samples, 0.67%)</title><rect x="645.5" y="405" width="7.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="648.46" y="415.5" ></text>
</g>
<g >
<title>mem.indexOfPosLinear__anon_7770 (2,028,435,372 samples, 12.89%)</title><rect x="1037.8" y="389" width="152.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1040.85" y="399.5" >mem.indexOfPosLinea..</text>
</g>
<g >
<title>ext4_readdir (2,791,228,970 samples, 17.74%)</title><rect x="356.1" y="277" width="209.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="359.13" y="287.5" >ext4_readdir</text>
</g>
<g >
<title>___slab_alloc (51,485,039 samples, 0.33%)</title><rect x="754.8" y="181" width="3.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="757.85" y="191.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall3 (38,344,079 samples, 0.24%)</title><rect x="12.5" y="501" width="2.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="15.54" y="511.5" ></text>
</g>
<g >
<title>memchr (52,817,784 samples, 0.34%)</title><rect x="385.5" y="213" width="3.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="388.48" y="223.5" ></text>
</g>
<g >
<title>math.isPowerOfTwo__anon_8146 (433,157,236 samples, 2.75%)</title><rect x="262.7" y="325" width="32.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="265.71" y="335.5" >ma..</text>
</g>
<g >
<title>__kmem_cache_free (30,118,987 samples, 0.19%)</title><rect x="547.5" y="245" width="2.3" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="550.50" y="255.5" ></text>
</g>
<g >
<title>housekeeping_test_cpu (18,125,561 samples, 0.12%)</title><rect x="466.9" y="149" width="1.3" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="469.86" y="159.5" ></text>
</g>
<g >
<title>__kmalloc (203,278,010 samples, 1.29%)</title><rect x="487.4" y="213" width="15.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="490.39" y="223.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1,924,719 samples, 0.01%)</title><rect x="649.3" y="293" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="652.33" y="303.5" ></text>
</g>
<g >
<title>valgrind.doClientRequestExpr (71,260,821 samples, 0.45%)</title><rect x="257.4" y="293" width="5.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="260.37" y="303.5" ></text>
</g>
<g >
<title>alloc_empty_file (479,032,807 samples, 3.05%)</title><rect x="738.2" y="213" width="36.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="741.23" y="223.5" >all..</text>
</g>
<g >
<title>build_open_flags (18,313,566 samples, 0.12%)</title><rect x="726.5" y="245" width="1.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="729.49" y="255.5" ></text>
</g>
<g >
<title>free_unref_page (1,912,167 samples, 0.01%)</title><rect x="649.3" y="261" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="652.33" y="271.5" ></text>
</g>
<g >
<title>close_fd_get_file (48,777,668 samples, 0.31%)</title><rect x="629.9" y="293" width="3.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="632.87" y="303.5" ></text>
</g>
<g >
<title>alloc_fd (85,217,939 samples, 0.54%)</title><rect x="720.1" y="245" width="6.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="723.10" y="255.5" ></text>
</g>
<g >
<title>debug.assert (16,586,078 samples, 0.11%)</title><rect x="1024.1" y="341" width="1.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1027.06" y="351.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).pop (65,014,110 samples, 0.41%)</title><rect x="50.8" y="405" width="4.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="53.77" y="415.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (53,089,257 samples, 0.34%)</title><rect x="558.9" y="245" width="4.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="561.88" y="255.5" ></text>
</g>
<g >
<title>inode_permission (63,610,544 samples, 0.40%)</title><rect x="851.3" y="197" width="4.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="854.29" y="207.5" ></text>
</g>
<g >
<title>filp_flush (124,656,090 samples, 0.79%)</title><rect x="633.5" y="293" width="9.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="636.53" y="303.5" ></text>
</g>
<g >
<title>ext4_getblk (873,010,540 samples, 5.55%)</title><rect x="413.1" y="197" width="65.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="416.09" y="207.5" >ext4_ge..</text>
</g>
<g >
<title>valgrind.doClientRequest (71,260,821 samples, 0.45%)</title><rect x="257.4" y="277" width="5.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="260.37" y="287.5" ></text>
</g>
<g >
<title>__kmem_cache_free (80,380,694 samples, 0.51%)</title><rect x="606.9" y="245" width="6.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="609.94" y="255.5" ></text>
</g>
<g >
<title>mem.indexOfScalarPos__anon_7261 (1,394,145,577 samples, 8.86%)</title><rect x="922.0" y="357" width="104.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="924.99" y="367.5" >mem.indexOfS..</text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (2,672,684,557 samples, 16.99%)</title><rect x="712.5" y="325" width="200.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="715.55" y="335.5" >os.linux.x86_64.syscall4</text>
</g>
<g >
<title>kmem_cache_free (36,063,296 samples, 0.23%)</title><rect x="900.0" y="245" width="2.7" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="902.97" y="255.5" ></text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (55,063,910 samples, 0.35%)</title><rect x="823.1" y="213" width="4.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="826.06" y="223.5" ></text>
</g>
<g >
<title>mem.eql__anon_5137 (198,379,087 samples, 1.26%)</title><rect x="206.3" y="373" width="14.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="209.25" y="383.5" ></text>
</g>
<g >
<title>rb_insert_color (35,709,938 samples, 0.23%)</title><rect x="513.5" y="213" width="2.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="516.51" y="223.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (51,419,815 samples, 0.33%)</title><rect x="649.5" y="373" width="3.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="652.47" y="383.5" ></text>
</g>
<g >
<title>debug.assert (17,921,133 samples, 0.11%)</title><rect x="67.8" y="373" width="1.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="70.84" y="383.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1,912,167 samples, 0.01%)</title><rect x="649.3" y="245" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="652.33" y="255.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (34,431,401 samples, 0.22%)</title><rect x="642.9" y="341" width="2.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="645.88" y="351.5" ></text>
</g>
<g >
<title>mem.indexOf__anon_3903 (2,142,900,753 samples, 13.62%)</title><rect x="1029.3" y="421" width="160.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1032.26" y="431.5" >mem.indexOf__anon_3903</text>
</g>
<g >
<title>start._start (15,659,105,367 samples, 99.54%)</title><rect x="15.4" y="517" width="1174.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="18.41" y="527.5" >start._start</text>
</g>
<g >
<title>__ext4_read_dirblock (890,514,594 samples, 5.66%)</title><rect x="411.8" y="229" width="66.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="414.78" y="239.5" >__ext4_..</text>
</g>
<g >
<title>get_obj_cgroup_from_current (102,079,033 samples, 0.65%)</title><rect x="758.7" y="181" width="7.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="761.71" y="191.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).ensureTotalCapacity (13,939,792 samples, 0.09%)</title><rect x="61.9" y="389" width="1.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="64.94" y="399.5" ></text>
</g>
<g >
<title>verify_dirent_name (52,817,784 samples, 0.34%)</title><rect x="385.5" y="229" width="3.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="388.48" y="239.5" ></text>
</g>
<g >
<title>__fput (340,586,153 samples, 2.17%)</title><rect x="601.7" y="293" width="25.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="604.67" y="303.5" >_..</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).append (141,449,306 samples, 0.90%)</title><rect x="40.2" y="405" width="10.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="43.16" y="415.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (68,048,754 samples, 0.43%)</title><rect x="902.7" y="277" width="5.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="905.68" y="287.5" ></text>
</g>
<g >
<title>__list_del_entry_valid_or_report (35,975,893 samples, 0.23%)</title><rect x="756.0" y="101" width="2.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="759.01" y="111.5" ></text>
</g>
<g >
<title>simd.firstTrue__anon_8148 (280,188,897 samples, 1.78%)</title><rect x="300.1" y="325" width="21.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="303.13" y="335.5" ></text>
</g>
<g >
<title>__filemap_get_folio (182,816,289 samples, 1.16%)</title><rect x="445.1" y="149" width="13.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="448.13" y="159.5" ></text>
</g>
<g >
<title>complete_walk (96,576,490 samples, 0.61%)</title><rect x="774.2" y="213" width="7.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="777.16" y="223.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (674,047,801 samples, 4.28%)</title><rect x="78.7" y="405" width="50.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="81.73" y="415.5" >compi..</text>
</g>
<g >
<title>lockref_get (35,668,348 samples, 0.23%)</title><rect x="802.9" y="197" width="2.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="805.86" y="207.5" ></text>
</g>
<g >
<title>htab_map_hash (36,067,700 samples, 0.23%)</title><rect x="815.1" y="117" width="2.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="818.08" y="127.5" ></text>
</g>
<g >
<title>do_sys_openat2 (2,470,311,411 samples, 15.70%)</title><rect x="717.4" y="261" width="185.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="720.38" y="271.5" >do_sys_openat2</text>
</g>
<g >
<title>bpf_lsm_file_open (195,946,128 samples, 1.25%)</title><rect x="808.4" y="181" width="14.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="811.36" y="191.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).addOne (120,776,375 samples, 0.77%)</title><rect x="40.8" y="389" width="9.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="43.80" y="399.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (106,882,830 samples, 0.68%)</title><rect x="458.8" y="133" width="8.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="461.84" y="143.5" ></text>
</g>
<g >
<title>iterate_dir (3,124,996,460 samples, 19.86%)</title><rect x="343.7" y="293" width="234.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="346.75" y="303.5" >iterate_dir</text>
</g>
<g >
<title>rcu_do_batch (14,847,534 samples, 0.09%)</title><rect x="477.5" y="53" width="1.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="480.46" y="63.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (33,926,214 samples, 0.22%)</title><rect x="861.7" y="197" width="2.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="864.71" y="207.5" ></text>
</g>
<g >
<title>__ext4_check_dir_entry (177,479,881 samples, 1.13%)</title><rect x="398.5" y="229" width="13.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="401.46" y="239.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (44,817,804 samples, 0.28%)</title><rect x="799.5" y="197" width="3.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="802.49" y="207.5" ></text>
</g>
<g >
<title>copy_from_kernel_nofault (50,785,401 samples, 0.32%)</title><rect x="817.8" y="117" width="3.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="820.78" y="127.5" ></text>
</g>
<g >
<title>debug.inValgrind (16,867,360 samples, 0.11%)</title><rect x="1025.3" y="341" width="1.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1028.30" y="351.5" ></text>
</g>
<g >
<title>__memcpy (109,345,910 samples, 0.70%)</title><rect x="502.6" y="213" width="8.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="505.63" y="223.5" ></text>
</g>
<g >
<title>ext4_htree_fill_tree (2,107,166,256 samples, 13.39%)</title><rect x="389.4" y="261" width="158.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="392.44" y="271.5" >ext4_htree_fill_tree</text>
</g>
<g >
<title>bpf_lsm_inode_permission (35,315,994 samples, 0.22%)</title><rect x="857.2" y="181" width="2.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="860.18" y="191.5" ></text>
</g>
<g >
<title>__fget_light (47,277,960 samples, 0.30%)</title><rect x="334.7" y="277" width="3.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="337.74" y="287.5" ></text>
</g>
<g >
<title>do_dentry_open (555,248,326 samples, 3.53%)</title><rect x="781.4" y="213" width="41.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="784.41" y="223.5" >do_..</text>
</g>
<g >
<title>kmalloc_trace (53,089,257 samples, 0.34%)</title><rect x="558.9" y="261" width="4.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="561.88" y="271.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (14,847,534 samples, 0.09%)</title><rect x="477.5" y="101" width="1.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="480.46" y="111.5" ></text>
</g>
<g >
<title>security_file_alloc (131,660,691 samples, 0.84%)</title><rect x="738.2" y="181" width="9.9" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="741.23" y="191.5" ></text>
</g>
<g >
<title>__memset (9,018,087 samples, 0.06%)</title><rect x="493.9" y="181" width="0.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="496.90" y="191.5" ></text>
</g>
<g >
<title>pick_file (15,858,392 samples, 0.10%)</title><rect x="632.3" y="277" width="1.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="635.34" y="287.5" ></text>
</g>
<g >
<title>ext4_sb_block_valid (48,292,691 samples, 0.31%)</title><rect x="470.8" y="149" width="3.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="473.82" y="159.5" ></text>
</g>
<g >
<title>module_put (16,644,505 samples, 0.11%)</title><rect x="626.0" y="277" width="1.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="628.96" y="287.5" ></text>
</g>
<g >
<title>filldir64 (322,219,582 samples, 2.05%)</title><rect x="365.3" y="245" width="24.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="368.27" y="255.5" >f..</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (14,921,203 samples, 0.09%)</title><rect x="54.5" y="389" width="1.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="57.53" y="399.5" ></text>
</g>
<g >
<title>__fdget_pos (85,954,177 samples, 0.55%)</title><rect x="334.7" y="293" width="6.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="337.74" y="303.5" ></text>
</g>
<g >
<title>mem.eqlBytes (35,273,377 samples, 0.22%)</title><rect x="206.3" y="357" width="2.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="209.25" y="367.5" ></text>
</g>
<g >
<title>down_read_killable (148,176,905 samples, 0.94%)</title><rect x="345.0" y="277" width="11.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="348.01" y="287.5" ></text>
</g>
<g >
<title>__free_one_page (1,912,167 samples, 0.01%)</title><rect x="649.3" y="229" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="652.33" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_lock (106,882,830 samples, 0.68%)</title><rect x="458.8" y="149" width="8.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="461.84" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_getdents64 (3,255,245,504 samples, 20.69%)</title><rect x="334.0" y="309" width="244.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="336.98" y="319.5" >__x64_sys_getdents64</text>
</g>
<g >
<title>kfree (94,015,222 samples, 0.60%)</title><rect x="614.4" y="245" width="7.0" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="617.39" y="255.5" ></text>
</g>
<g >
<title>fsnotify (36,244,574 samples, 0.23%)</title><rect x="565.5" y="277" width="2.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="568.50" y="287.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOne (48,078,197 samples, 0.31%)</title><rect x="58.3" y="389" width="3.6" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="61.34" y="399.5" ></text>
</g>
<g >
<title>errseq_sample (16,999,294 samples, 0.11%)</title><rect x="792.9" y="197" width="1.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="795.90" y="207.5" ></text>
</g>
<g >
<title>terminate_walk (122,158,368 samples, 0.78%)</title><rect x="860.5" y="213" width="9.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="863.50" y="223.5" ></text>
</g>
<g >
<title>mem.eql__anon_5137 (15,305,892 samples, 0.10%)</title><rect x="1036.7" y="389" width="1.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1039.70" y="399.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (14,720,901 samples, 0.09%)</title><rect x="765.3" y="149" width="1.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="768.26" y="159.5" ></text>
</g>
<g >
<title>ext4_bread (873,010,540 samples, 5.55%)</title><rect x="413.1" y="213" width="65.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="416.09" y="223.5" >ext4_br..</text>
</g>
<g >
<title>mem.isAligned (16,797,986 samples, 0.11%)</title><rect x="298.9" y="325" width="1.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="301.87" y="335.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (35,975,893 samples, 0.23%)</title><rect x="756.0" y="117" width="2.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="759.01" y="127.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (33,838,344 samples, 0.22%)</title><rect x="10.0" y="501" width="2.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (421,610,492 samples, 2.68%)</title><rect x="653.3" y="389" width="31.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="656.33" y="399.5" >co..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (14,847,534 samples, 0.09%)</title><rect x="477.5" y="133" width="1.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="480.46" y="143.5" ></text>
</g>
<g >
<title>start.posixCallMainAndExit (15,659,105,367 samples, 99.54%)</title><rect x="15.4" y="501" width="1174.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="18.41" y="511.5" >start.posixCallMainAndExit</text>
</g>
<g >
<title>fd_install (88,865,606 samples, 0.56%)</title><rect x="872.1" y="245" width="6.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="875.14" y="255.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (16,043,182 samples, 0.10%)</title><rect x="568.2" y="277" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="571.22" y="287.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendSliceAssumeCapacity (82,662,085 samples, 0.53%)</title><rect x="69.2" y="405" width="6.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="72.18" y="415.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (237,063,801 samples, 1.51%)</title><rect x="827.2" y="197" width="17.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="830.19" y="207.5" ></text>
</g>
<g >
<title>do_filp_open (1,923,421,529 samples, 12.23%)</title><rect x="727.9" y="245" width="144.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="730.86" y="255.5" >do_filp_open</text>
</g>
<g >
<title>rcu_core (14,847,534 samples, 0.09%)</title><rect x="477.5" y="69" width="1.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="480.46" y="79.5" ></text>
</g>
<g >
<title>kmem_cache_free (16,797,498 samples, 0.11%)</title><rect x="624.7" y="277" width="1.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="627.70" y="287.5" ></text>
</g>
<g >
<title>may_open (198,152,206 samples, 1.26%)</title><rect x="845.0" y="213" width="14.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="847.97" y="223.5" ></text>
</g>
<g >
<title>compiler_rt.memset.memset (34,004,742 samples, 0.22%)</title><rect x="129.3" y="405" width="2.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="132.29" y="415.5" ></text>
</g>
<g >
<title>mem.eqlBytes (34,655,232 samples, 0.22%)</title><rect x="203.7" y="373" width="2.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="206.65" y="383.5" ></text>
</g>
<g >
<title>dput (34,364,370 samples, 0.22%)</title><rect x="604.4" y="277" width="2.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="607.36" y="287.5" ></text>
</g>
<g >
<title>fsnotify_find_mark (106,952,935 samples, 0.68%)</title><rect x="633.5" y="261" width="8.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="636.53" y="271.5" ></text>
</g>
<g >
<title>__ext4fs_dirhash (417,450,163 samples, 2.65%)</title><rect x="516.2" y="213" width="31.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="519.19" y="223.5" >__..</text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (88,694,456 samples, 0.56%)</title><rect x="766.4" y="181" width="6.6" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="769.37" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_close (693,980,373 samples, 4.41%)</title><rect x="590.8" y="309" width="52.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="593.83" y="319.5" >__x64..</text>
</g>
<g >
<title>__put_user_8 (34,140,430 samples, 0.22%)</title><rect x="341.2" y="293" width="2.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="344.19" y="303.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (95,835,647 samples, 0.61%)</title><rect x="487.4" y="197" width="7.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="490.39" y="207.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).shrinkRetainingCapacity (34,526,733 samples, 0.22%)</title><rect x="76.1" y="405" width="2.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="79.14" y="415.5" ></text>
</g>
<g >
<title>call_filldir (408,594,772 samples, 2.60%)</title><rect x="358.8" y="261" width="30.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="361.80" y="271.5" >ca..</text>
</g>
<g >
<title>fs.Dir.openDir (4,975,904,469 samples, 31.63%)</title><rect x="653.3" y="405" width="373.3" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="656.33" y="415.5" >fs.Dir.openDir</text>
</g>
<g >
<title>[unknown] (72,182,423 samples, 0.46%)</title><rect x="10.0" y="517" width="5.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>fsnotify (16,043,182 samples, 0.10%)</title><rect x="568.2" y="261" width="1.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="571.22" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,288,078,837 samples, 20.90%)</title><rect x="332.9" y="341" width="246.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="335.93" y="351.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>start.callMainWithArgs (15,659,105,367 samples, 99.54%)</title><rect x="15.4" y="485" width="1174.6" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="18.41" y="495.5" >start.callMainWithArgs</text>
</g>
<g >
<title>kmalloc_slab (107,442,363 samples, 0.68%)</title><rect x="494.6" y="197" width="8.0" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="497.58" y="207.5" ></text>
</g>
<g >
<title>__rcu_read_lock (15,471,334 samples, 0.10%)</title><rect x="768.6" y="165" width="1.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="771.57" y="175.5" ></text>
</g>
<g >
<title>__find_get_block (666,020,038 samples, 4.23%)</title><rect x="418.3" y="165" width="49.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="421.26" y="175.5" >__fin..</text>
</g>
<g >
<title>__getblk_gfp (700,700,335 samples, 4.45%)</title><rect x="415.7" y="181" width="52.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="418.66" y="191.5" >__get..</text>
</g>
<g >
<title>xas_load (151,301,375 samples, 0.96%)</title><rect x="446.5" y="117" width="11.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="449.46" y="127.5" ></text>
</g>
<g >
<title>vfs_open (32,971,449 samples, 0.21%)</title><rect x="869.7" y="213" width="2.4" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="872.67" y="223.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (163,105,710 samples, 1.04%)</title><rect x="208.9" y="357" width="12.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="211.90" y="367.5" ></text>
</g>
<g >
<title>__srcu_read_lock (53,767,379 samples, 0.34%)</title><rect x="634.9" y="229" width="4.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="637.87" y="239.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).ensureUnusedCapacity (10,057,515 samples, 0.06%)</title><rect x="75.4" y="405" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="78.38" y="415.5" ></text>
</g>
<g >
<title>up_read (32,300,277 samples, 0.21%)</title><rect x="575.7" y="277" width="2.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="578.73" y="287.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (487,100,920 samples, 3.10%)</title><rect x="1150.9" y="357" width="36.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1153.86" y="367.5" >mem..</text>
</g>
<g >
<title>__srcu_read_unlock (35,366,428 samples, 0.22%)</title><rect x="638.9" y="229" width="2.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="641.90" y="239.5" ></text>
</g>
<g >
<title>__legitimize_path (96,452,667 samples, 0.61%)</title><rect x="774.2" y="181" width="7.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="777.17" y="191.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (15,237,014 samples, 0.10%)</title><rect x="773.0" y="181" width="1.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="776.02" y="191.5" ></text>
</g>
<g >
<title>__brelse (34,717,013 samples, 0.22%)</title><rect x="395.9" y="229" width="2.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="398.86" y="239.5" ></text>
</g>
<g >
<title>init_file (131,660,691 samples, 0.84%)</title><rect x="738.2" y="197" width="9.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="741.23" y="207.5" ></text>
</g>
<g >
<title>[[x_tables]] (195,946,128 samples, 1.25%)</title><rect x="808.4" y="165" width="14.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="811.36" y="175.5" ></text>
</g>
<g >
<title>rb_first_postorder (43,533,071 samples, 0.28%)</title><rect x="621.4" y="245" width="3.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="624.44" y="255.5" ></text>
</g>
<g >
<title>fs.Dir.Walker.next (13,433,707,307 samples, 85.39%)</title><rect x="21.6" y="421" width="1007.7" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="24.60" y="431.5" >fs.Dir.Walker.next</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1,924,719 samples, 0.01%)</title><rect x="649.3" y="357" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="652.33" y="367.5" ></text>
</g>
<g >
<title>make_vfsuid (17,450,627 samples, 0.11%)</title><rect x="574.4" y="245" width="1.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="577.42" y="255.5" ></text>
</g>
<g >
<title>valgrind.doClientRequest (16,867,360 samples, 0.11%)</title><rect x="1025.3" y="293" width="1.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1028.30" y="303.5" ></text>
</g>
<g >
<title>search_name_run (15,731,287,790 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >search_name_run</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (618,667,445 samples, 3.93%)</title><rect x="139.7" y="389" width="46.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="142.68" y="399.5" >comp..</text>
</g>
<g >
<title>_raw_spin_lock (32,919,276 samples, 0.21%)</title><rect x="629.9" y="277" width="2.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="632.87" y="287.5" ></text>
</g>
<g >
<title>free_rb_tree_fname (236,808,672 samples, 1.51%)</title><rect x="606.9" y="261" width="17.8" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="609.94" y="271.5" ></text>
</g>
<g >
<title>posix.openatZ (2,749,086,824 samples, 17.48%)</title><rect x="709.3" y="357" width="206.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="712.26" y="367.5" >posix.openatZ</text>
</g>
<g >
<title>security_file_open (233,642,825 samples, 1.49%)</title><rect x="805.5" y="197" width="17.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="808.53" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (33,838,344 samples, 0.22%)</title><rect x="10.0" y="485" width="2.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>mod_memcg_lruvec_state (35,414,688 samples, 0.23%)</title><rect x="770.4" y="149" width="2.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="773.36" y="159.5" ></text>
</g>
<g >
<title>mem.alignForward__anon_3954 (48,907,218 samples, 0.31%)</title><rect x="295.2" y="325" width="3.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="298.21" y="335.5" ></text>
</g>
<g >
<title>compiler_rt.memset.memset (117,288,590 samples, 0.75%)</title><rect x="685.0" y="389" width="8.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="687.95" y="399.5" ></text>
</g>
<g >
<title>__legitimize_mnt (78,690,466 samples, 0.50%)</title><rect x="775.5" y="165" width="5.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="778.50" y="175.5" ></text>
</g>
<g >
<title>start.callMain (15,659,105,367 samples, 99.54%)</title><rect x="15.4" y="469" width="1174.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="18.41" y="479.5" >start.callMain</text>
</g>
<g >
<title>[unknown] (25,478,274 samples, 0.16%)</title><rect x="710.6" y="341" width="1.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="713.63" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (25,478,274 samples, 0.16%)</title><rect x="710.6" y="309" width="1.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="713.63" y="319.5" ></text>
</g>
<g >
<title>security_inode_permission (50,284,823 samples, 0.32%)</title><rect x="856.1" y="197" width="3.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="859.06" y="207.5" ></text>
</g>
<g >
<title>mntput_no_expire (36,248,057 samples, 0.23%)</title><rect x="866.9" y="197" width="2.8" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="869.95" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (722,130,566 samples, 4.59%)</title><rect x="588.7" y="325" width="54.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="591.71" y="335.5" >do_sy..</text>
</g>
<g >
<title>posix.close (824,052,500 samples, 5.24%)</title><rect x="583.7" y="389" width="61.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="586.65" y="399.5" >posix...</text>
</g>
<g >
<title>fs.Dir.openDirZ (35,909,258 samples, 0.23%)</title><rect x="1026.6" y="405" width="2.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1029.57" y="415.5" ></text>
</g>
<g >
<title>fs.Dir.iterateImpl (51,419,815 samples, 0.33%)</title><rect x="649.5" y="389" width="3.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="652.47" y="399.5" ></text>
</g>
<g >
<title>path_openat (1,837,916,234 samples, 11.68%)</title><rect x="734.3" y="229" width="137.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="737.28" y="239.5" >path_openat</text>
</g>
<g >
<title>security_file_permission (52,871,226 samples, 0.34%)</title><rect x="569.4" y="277" width="4.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="572.42" y="287.5" ></text>
</g>
<g >
<title>debug.assert (33,913,242 samples, 0.22%)</title><rect x="131.8" y="405" width="2.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="134.84" y="415.5" ></text>
</g>
<g >
<title>os.linux.getdents64 (3,480,714,899 samples, 22.13%)</title><rect x="321.2" y="373" width="261.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="324.15" y="383.5" >os.linux.getdents64</text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (824,052,500 samples, 5.24%)</title><rect x="583.7" y="357" width="61.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="586.65" y="367.5" >os.lin..</text>
</g>
<g >
<title>hook_file_alloc_security (49,449,040 samples, 0.31%)</title><rect x="740.7" y="165" width="3.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="743.69" y="175.5" ></text>
</g>
<g >
<title>mem.eqlBytes (1,278,342,844 samples, 8.13%)</title><rect x="1055.0" y="357" width="95.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1057.97" y="367.5" >mem.eqlBytes</text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (25,478,274 samples, 0.16%)</title><rect x="710.6" y="325" width="1.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="713.63" y="335.5" ></text>
</g>
<g >
<title>mem.indexOfScalar__anon_7187 (1,429,563,078 samples, 9.09%)</title><rect x="919.3" y="373" width="107.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="922.34" y="383.5" >mem.indexOfSc..</text>
</g>
<g >
<title>__memset (123,127,447 samples, 0.78%)</title><rect x="878.8" y="213" width="9.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="881.81" y="223.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (14,926,045 samples, 0.09%)</title><rect x="913.0" y="341" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="916.02" y="351.5" ></text>
</g>
<g >
<title>__htab_map_lookup_elem (125,668,543 samples, 0.80%)</title><rect x="808.4" y="133" width="9.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="811.36" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (722,130,566 samples, 4.59%)</title><rect x="588.7" y="341" width="54.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="591.71" y="351.5" >entry..</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (54,018,486 samples, 0.34%)</title><rect x="199.6" y="373" width="4.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="202.60" y="383.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (49,493,297 samples, 0.31%)</title><rect x="744.4" y="165" width="3.7" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="747.39" y="175.5" ></text>
</g>
<g >
<title>fsnotify_grab_connector (106,952,935 samples, 0.68%)</title><rect x="633.5" y="245" width="8.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="636.53" y="255.5" ></text>
</g>
<g >
<title>os.linux.close (824,052,500 samples, 5.24%)</title><rect x="583.7" y="373" width="61.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="586.65" y="383.5" >os.lin..</text>
</g>
<g >
<title>valgrind.runningOnValgrind (16,867,360 samples, 0.11%)</title><rect x="1025.3" y="325" width="1.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1028.30" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (29,618,369 samples, 0.19%)</title><rect x="330.7" y="341" width="2.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="333.71" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (38,344,079 samples, 0.24%)</title><rect x="12.5" y="485" width="2.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="15.54" y="495.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (48,279,609 samples, 0.31%)</title><rect x="15.4" y="437" width="3.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="18.41" y="447.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (16,757,461 samples, 0.11%)</title><rect x="821.6" y="133" width="1.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="824.59" y="143.5" ></text>
</g>
<g >
<title>locks_remove_posix (17,703,155 samples, 0.11%)</title><rect x="641.6" y="277" width="1.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="644.55" y="287.5" ></text>
</g>
<g >
<title>__alloc_pages (35,975,893 samples, 0.23%)</title><rect x="756.0" y="149" width="2.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="759.01" y="159.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (35,787,142 samples, 0.23%)</title><rect x="55.7" y="405" width="2.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="58.65" y="415.5" ></text>
</g>
<g >
<title>mem.indexOfSentinel__anon_8615 (962,780,076 samples, 6.12%)</title><rect x="248.9" y="341" width="72.3" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="251.93" y="351.5" >mem.inde..</text>
</g>
<g >
<title>allocate_slab (35,975,893 samples, 0.23%)</title><rect x="756.0" y="165" width="2.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="759.01" y="175.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (82,600,997 samples, 0.53%)</title><rect x="63.0" y="389" width="6.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="65.99" y="399.5" ></text>
</g>
<g >
<title>__slab_free (18,879,685 samples, 0.12%)</title><rect x="613.0" y="245" width="1.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="615.97" y="255.5" ></text>
</g>
<g >
<title>mem.isAlignedGeneric__anon_7754 (16,797,986 samples, 0.11%)</title><rect x="298.9" y="309" width="1.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="301.87" y="319.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (35,980,664 samples, 0.23%)</title><rect x="888.0" y="213" width="2.7" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="891.04" y="223.5" ></text>
</g>
<g >
<title>is_dx_dir (121,608,979 samples, 0.77%)</title><rect x="549.8" y="261" width="9.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="552.76" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_free (14,847,534 samples, 0.09%)</title><rect x="477.5" y="37" width="1.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="480.46" y="47.5" ></text>
</g>
<g >
<title>handle_softirqs (14,847,534 samples, 0.09%)</title><rect x="477.5" y="85" width="1.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="480.46" y="95.5" ></text>
</g>
<g >
<title>__check_block_validity.constprop.0 (48,292,691 samples, 0.31%)</title><rect x="470.8" y="165" width="3.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="473.82" y="175.5" ></text>
</g>
<g >
<title>meta.hasUniqueRepresentation (34,685,319 samples, 0.22%)</title><rect x="1187.4" y="357" width="2.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1190.40" y="367.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (347,372,116 samples, 2.21%)</title><rect x="748.1" y="197" width="26.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="751.11" y="207.5" >k..</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (34,217,698 samples, 0.22%)</title><rect x="19.0" y="421" width="2.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="22.04" y="431.5" ></text>
</g>
<g >
<title>search_name_runner.main (15,659,105,367 samples, 99.54%)</title><rect x="15.4" y="453" width="1174.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.41" y="463.5" >search_name_runner.main</text>
</g>
<g >
<title>kmem_cache_alloc (159,108,111 samples, 1.01%)</title><rect x="878.8" y="229" width="11.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="881.81" y="239.5" ></text>
</g>
<g >
<title>posix.errno__anon_7457 (17,659,264 samples, 0.11%)</title><rect x="914.1" y="341" width="1.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="917.14" y="351.5" ></text>
</g>
<g >
<title>ext4fs_dirhash (417,450,163 samples, 2.65%)</title><rect x="516.2" y="229" width="31.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="519.19" y="239.5" >ex..</text>
</g>
<g >
<title>dnotify_flush (106,952,935 samples, 0.68%)</title><rect x="633.5" y="277" width="8.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="636.53" y="287.5" ></text>
</g>
<g >
<title>str2hashbuf_signed (97,544,284 samples, 0.62%)</title><rect x="540.2" y="197" width="7.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="543.19" y="207.5" ></text>
</g>
<g >
<title>rb_next (35,092,954 samples, 0.22%)</title><rect x="562.9" y="261" width="2.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="565.87" y="271.5" ></text>
</g>
<g >
<title>fsnotify (44,817,804 samples, 0.28%)</title><rect x="799.5" y="181" width="3.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="802.49" y="191.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (31,748,513 samples, 0.20%)</title><rect x="73.0" y="389" width="2.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="76.00" y="399.5" ></text>
</g>
<g >
<title>valgrind.doClientRequestExpr (16,867,360 samples, 0.11%)</title><rect x="1025.3" y="309" width="1.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1028.30" y="319.5" ></text>
</g>
<g >
<title>__check_object_size (40,862,556 samples, 0.26%)</title><rect x="896.9" y="213" width="3.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="899.91" y="223.5" ></text>
</g>
<g >
<title>strncpy_from_user (123,097,882 samples, 0.78%)</title><rect x="890.7" y="229" width="9.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="893.74" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,609,413,415 samples, 16.59%)</title><rect x="714.7" y="309" width="195.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="717.65" y="319.5" >entry_SYSCALL_64_after_hw..</text>
</g>
<g >
<title>syscall_return_via_sysret (35,173,024 samples, 0.22%)</title><rect x="910.4" y="309" width="2.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="913.38" y="319.5" ></text>
</g>
<g >
<title>__mmdrop (1,912,167 samples, 0.01%)</title><rect x="649.3" y="277" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="652.33" y="287.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (53,414,466 samples, 0.34%)</title><rect x="645.5" y="389" width="4.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="648.46" y="399.5" ></text>
</g>
<g >
<title>x64_sys_call (34,689,539 samples, 0.22%)</title><rect x="907.8" y="277" width="2.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="910.78" y="287.5" ></text>
</g>
<g >
<title>dput (35,918,876 samples, 0.23%)</title><rect x="864.3" y="197" width="2.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="867.25" y="207.5" ></text>
</g>
<g >
<title>make_vfsuid (18,299,020 samples, 0.12%)</title><rect x="854.7" y="165" width="1.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="857.69" y="175.5" ></text>
</g>
<g >
<title>__fput_sync (35,434,949 samples, 0.23%)</title><rect x="627.2" y="293" width="2.7" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="630.21" y="303.5" ></text>
</g>
<g >
<title>mem.lenSliceTo__anon_8499 (962,780,076 samples, 6.12%)</title><rect x="248.9" y="357" width="72.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="251.93" y="367.5" >mem.lenS..</text>
</g>
<g >
<title>__fget_light (8,949,481 samples, 0.06%)</title><rect x="859.8" y="197" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="862.83" y="207.5" ></text>
</g>
<g >
<title>debug.assert (70,122,811 samples, 0.45%)</title><rect x="44.6" y="357" width="5.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="47.60" y="367.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendAssumeCapacity (82,600,997 samples, 0.53%)</title><rect x="63.0" y="405" width="6.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="65.99" y="415.5" ></text>
</g>
<g >
<title>mem.indexOfPos__anon_4210 (2,058,503,899 samples, 13.09%)</title><rect x="1035.6" y="405" width="154.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1038.59" y="415.5" >mem.indexOfPos__ano..</text>
</g>
<g >
<title>__get_obj_cgroup_from_memcg (86,087,734 samples, 0.55%)</title><rect x="759.9" y="165" width="6.5" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="762.91" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,609,413,415 samples, 16.59%)</title><rect x="714.7" y="293" width="195.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="717.65" y="303.5" >do_syscall_64</text>
</g>
<g >
<title>search_name.SearchIterator.next (15,610,825,758 samples, 99.23%)</title><rect x="19.0" y="437" width="1171.0" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="22.04" y="447.5" >search_name.SearchIterator.next</text>
</g>
<g >
<title>copy_from_kernel_nofault_allowed (35,828,418 samples, 0.23%)</title><rect x="818.9" y="101" width="2.7" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="821.91" y="111.5" ></text>
</g>
<g >
<title>generic_permission (63,610,544 samples, 0.40%)</title><rect x="851.3" y="181" width="4.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="854.29" y="191.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (18,885,287 samples, 0.12%)</title><rect x="578.2" y="309" width="1.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="581.15" y="319.5" ></text>
</g>
<g >
<title>free_rb_tree_fname (30,118,987 samples, 0.19%)</title><rect x="547.5" y="261" width="2.3" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="550.50" y="271.5" ></text>
</g>
<g >
<title>rcu_async_should_hurry (50,019,973 samples, 0.32%)</title><rect x="597.9" y="277" width="3.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="600.91" y="287.5" ></text>
</g>
<g >
<title>all (15,731,287,790 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (68,048,754 samples, 0.43%)</title><rect x="902.7" y="261" width="5.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="905.68" y="271.5" ></text>
</g>
<g >
<title>lookup_fast (237,063,801 samples, 1.51%)</title><rect x="827.2" y="213" width="17.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="830.19" y="223.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).append (62,017,989 samples, 0.39%)</title><rect x="58.3" y="405" width="4.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="61.34" y="415.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (12,214,165 samples, 0.08%)</title><rect x="49.9" y="389" width="0.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="52.86" y="399.5" ></text>
</g>
<g >
<title>__fsnotify_parent (36,145,145 samples, 0.23%)</title><rect x="790.2" y="197" width="2.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="793.18" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,274,130,791 samples, 20.81%)</title><rect x="334.0" y="325" width="245.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="336.98" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>debug.assert (398,401,905 samples, 2.53%)</title><rect x="265.3" y="309" width="29.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="268.32" y="319.5" >de..</text>
</g>
<g >
<title>mem.sliceTo__anon_7548 (1,333,401,932 samples, 8.48%)</title><rect x="221.1" y="373" width="100.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="224.13" y="383.5" >mem.sliceTo_..</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (35,589,474 samples, 0.23%)</title><rect x="579.6" y="341" width="2.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="582.57" y="351.5" ></text>
</g>
<g >
<title>bpf_probe_read_kernel (50,785,401 samples, 0.32%)</title><rect x="817.8" y="133" width="3.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="820.78" y="143.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).addOneAssumeCapacity (120,776,375 samples, 0.77%)</title><rect x="40.8" y="373" width="9.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="43.80" y="383.5" ></text>
</g>
<g >
<title>mutex_lock (38,676,217 samples, 0.25%)</title><rect x="338.3" y="277" width="2.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="341.28" y="287.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_3782.next (5,970,628,071 samples, 37.95%)</title><rect x="134.4" y="405" width="447.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="137.38" y="415.5" >fs.Dir.Iterator__struct_3782.next</text>
</g>
<g >
<title>ext4_release_dir (236,808,672 samples, 1.51%)</title><rect x="606.9" y="277" width="17.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="609.94" y="287.5" ></text>
</g>
<g >
<title>__bpf_tramp_enter (2,734,723 samples, 0.02%)</title><rect x="822.9" y="149" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="825.85" y="159.5" ></text>
</g>
<g >
<title>__call_rcu_common (110,330,345 samples, 0.70%)</title><rect x="593.4" y="293" width="8.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="596.39" y="303.5" ></text>
</g>
<g >
<title>os.linux.openat (2,672,698,416 samples, 16.99%)</title><rect x="712.5" y="341" width="200.5" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="715.54" y="351.5" >os.linux.openat</text>
</g>
<g >
<title>touch_atime (31,243,687 samples, 0.20%)</title><rect x="573.4" y="277" width="2.3" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="576.39" y="287.5" ></text>
</g>
<g >
<title>posix.toPosixPath (1,481,147,034 samples, 9.42%)</title><rect x="915.5" y="389" width="111.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="918.47" y="399.5" >posix.toPosix..</text>
</g>
<g >
<title>fs.Dir.close (842,887,642 samples, 5.36%)</title><rect x="582.2" y="405" width="63.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="585.24" y="415.5" >fs.Dir..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (1,924,719 samples, 0.01%)</title><rect x="649.3" y="341" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="652.33" y="351.5" ></text>
</g>
<g >
<title>ext4_map_blocks (138,032,554 samples, 0.88%)</title><rect x="468.2" y="181" width="10.4" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="471.22" y="191.5" ></text>
</g>
<g >
<title>xas_descend (63,769,852 samples, 0.41%)</title><rect x="453.0" y="101" width="4.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="456.02" y="111.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (55,119,994 samples, 0.35%)</title><rect x="474.4" y="165" width="4.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="477.44" y="175.5" ></text>
</g>
<g >
<title>get_page_from_freelist (35,975,893 samples, 0.23%)</title><rect x="756.0" y="133" width="2.7" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="759.01" y="143.5" ></text>
</g>
<g >
<title>htree_dirblock_to_tree (2,072,356,497 samples, 13.17%)</title><rect x="392.1" y="245" width="155.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="395.06" y="255.5" >htree_dirblock_to_t..</text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (17,031,034 samples, 0.11%)</title><rect x="561.6" y="229" width="1.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="564.59" y="239.5" ></text>
</g>
<g >
<title>debug.inValgrind (71,260,821 samples, 0.45%)</title><rect x="257.4" y="325" width="5.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="260.37" y="335.5" ></text>
</g>
<g >
<title>ext4_htree_store_dirent (501,471,632 samples, 3.19%)</title><rect x="478.6" y="229" width="37.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="481.57" y="239.5" >ext..</text>
</g>
<g >
<title>mod_objcg_state (43,854,525 samples, 0.28%)</title><rect x="769.7" y="165" width="3.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="772.73" y="175.5" ></text>
</g>
<g >
<title>filemap_get_entry (168,984,378 samples, 1.07%)</title><rect x="445.1" y="133" width="12.7" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="448.13" y="143.5" ></text>
</g>
<g >
<title>__schedule (1,924,719 samples, 0.01%)</title><rect x="649.3" y="309" width="0.2" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="652.33" y="319.5" ></text>
</g>
<g >
<title>fsnotify (70,962,395 samples, 0.45%)</title><rect x="794.2" y="197" width="5.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="797.17" y="207.5" ></text>
</g>
<g >
<title>folio_mark_accessed (13,831,911 samples, 0.09%)</title><rect x="457.8" y="133" width="1.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="460.81" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_openat (2,506,675,122 samples, 15.93%)</title><rect x="714.7" y="277" width="188.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="717.65" y="287.5" >__x64_sys_openat</text>
</g>
<g >
<title>getname_flags.part.0 (282,205,993 samples, 1.79%)</title><rect x="878.8" y="245" width="21.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="881.81" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (1,924,719 samples, 0.01%)</title><rect x="649.3" y="373" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="652.33" y="383.5" ></text>
</g>
<g >
<title>_raw_read_lock (9,045,924 samples, 0.06%)</title><rect x="476.8" y="149" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="479.78" y="159.5" ></text>
</g>
<g >
<title>[unknown] (193,211,405 samples, 1.23%)</title><rect x="808.4" y="149" width="14.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="811.36" y="159.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall3 (3,480,714,899 samples, 22.13%)</title><rect x="321.2" y="357" width="261.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="324.15" y="367.5" >os.linux.x86_64.syscall3</text>
</g>
<g >
<title>__list_add_valid_or_report (1,912,167 samples, 0.01%)</title><rect x="649.3" y="213" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="652.33" y="223.5" ></text>
</g>
<g >
<title>schedule (1,924,719 samples, 0.01%)</title><rect x="649.3" y="325" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="652.33" y="335.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (35,652,492 samples, 0.23%)</title><rect x="510.8" y="213" width="2.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="513.84" y="223.5" ></text>
</g>
<g >
<title>fs.Dir.openDirZ (2,955,858,353 samples, 18.79%)</title><rect x="693.7" y="389" width="221.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="696.75" y="399.5" >fs.Dir.openDirZ</text>
</g>
<g >
<title>path_init (8,949,481 samples, 0.06%)</title><rect x="859.8" y="213" width="0.7" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="862.83" y="223.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_3782.nextLinux (5,281,405,516 samples, 33.57%)</title><rect x="186.1" y="389" width="396.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="189.08" y="399.5" >fs.Dir.Iterator__struct_3782.nextLinux</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (14,847,534 samples, 0.09%)</title><rect x="477.5" y="117" width="1.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="480.46" y="127.5" ></text>
</g>
<g >
<title>mem.alignBackward__anon_7461 (34,407,214 samples, 0.22%)</title><rect x="296.3" y="309" width="2.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="299.29" y="319.5" ></text>
</g>
</g>
</svg>
