<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>ext4_htree_store_dirent (195,815,583 samples, 2.13%)</title><rect x="397.0" y="197" width="25.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="399.97" y="207.5" >e..</text>
</g>
<g >
<title>fsnotify_perm.part.0 (27,952,010 samples, 0.30%)</title><rect x="472.3" y="245" width="3.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="475.27" y="255.5" ></text>
</g>
<g >
<title>handle_softirqs (27,221,960 samples, 0.30%)</title><rect x="240.4" y="261" width="3.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="243.41" y="271.5" ></text>
</g>
<g >
<title>_raw_spin_lock (83,697,544 samples, 0.91%)</title><rect x="372.0" y="117" width="10.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="374.98" y="127.5" ></text>
</g>
<g >
<title>mem.indexOfScalar__anon_7187 (166,994,932 samples, 1.81%)</title><rect x="927.4" y="341" width="21.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="930.39" y="351.5" >m..</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (55,722,847 samples, 0.61%)</title><rect x="905.7" y="277" width="7.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="908.65" y="287.5" ></text>
</g>
<g >
<title>bpf_lsm_file_alloc_security (55,184,231 samples, 0.60%)</title><rect x="747.5" y="133" width="7.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="750.47" y="143.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendAssumeCapacity (27,790,669 samples, 0.30%)</title><rect x="52.6" y="373" width="3.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="55.65" y="383.5" ></text>
</g>
<g >
<title>rb_next_postorder (27,674,289 samples, 0.30%)</title><rect x="454.4" y="213" width="3.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="457.44" y="223.5" ></text>
</g>
<g >
<title>debug.inValgrind (28,126,618 samples, 0.31%)</title><rect x="945.2" y="309" width="3.6" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="948.19" y="319.5" ></text>
</g>
<g >
<title>lockref_put_return (29,762,997 samples, 0.32%)</title><rect x="862.6" y="149" width="3.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="865.59" y="159.5" ></text>
</g>
<g >
<title>do_dentry_open (167,455,936 samples, 1.82%)</title><rect x="805.4" y="181" width="21.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="808.37" y="191.5" >d..</text>
</g>
<g >
<title>mem.indexOf__anon_3903 (1,882,475,567 samples, 20.44%)</title><rect x="948.8" y="389" width="241.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="951.79" y="399.5" >mem.indexOf__anon_3903</text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (27,984,316 samples, 0.30%)</title><rect x="712.1" y="37" width="3.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="715.07" y="47.5" ></text>
</g>
<g >
<title>__call_rcu_common (27,525,538 samples, 0.30%)</title><rect x="522.2" y="261" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="525.18" y="271.5" ></text>
</g>
<g >
<title>array_list.addOrOom (27,254,803 samples, 0.30%)</title><rect x="63.4" y="357" width="3.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="66.39" y="367.5" ></text>
</g>
<g >
<title>__memset (56,266,565 samples, 0.61%)</title><rect x="404.1" y="149" width="7.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="407.09" y="159.5" ></text>
</g>
<g >
<title>lockref_get_not_dead (28,104,074 samples, 0.31%)</title><rect x="801.8" y="133" width="3.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="804.77" y="143.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (27,221,960 samples, 0.30%)</title><rect x="240.4" y="293" width="3.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="243.41" y="303.5" ></text>
</g>
<g >
<title>bpf_lsm_inode_permission (27,398,985 samples, 0.30%)</title><rect x="844.7" y="149" width="3.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="847.75" y="159.5" ></text>
</g>
<g >
<title>mem.indexOfSentinel__anon_8615 (195,501,627 samples, 2.12%)</title><rect x="204.8" y="309" width="25.0" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="207.75" y="319.5" >m..</text>
</g>
<g >
<title>entry_SYSCALL_64 (82,631,914 samples, 0.90%)</title><rect x="243.9" y="309" width="10.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="246.90" y="319.5" ></text>
</g>
<g >
<title>fs.Dir.openDirFlagsZ (1,819,157,370 samples, 19.75%)</title><rect x="690.7" y="341" width="233.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="693.69" y="351.5" >fs.Dir.openDirFlagsZ</text>
</g>
<g >
<title>fsnotify (83,065,510 samples, 0.90%)</title><rect x="550.7" y="245" width="10.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="553.69" y="255.5" ></text>
</g>
<g >
<title>filldir64 (140,057,773 samples, 1.52%)</title><rect x="293.3" y="213" width="18.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="296.34" y="223.5" ></text>
</g>
<g >
<title>__getblk_gfp (360,511,966 samples, 3.91%)</title><rect x="340.0" y="149" width="46.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="343.00" y="159.5" >__ge..</text>
</g>
<g >
<title>kmem_cache_alloc (83,911,433 samples, 0.91%)</title><rect x="880.7" y="197" width="10.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="883.70" y="207.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_3782.next (2,944,258,224 samples, 31.97%)</title><rect x="141.4" y="373" width="377.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="144.44" y="383.5" >fs.Dir.Iterator__struct_3782.next</text>
</g>
<g >
<title>kmem_cache_free (28,188,767 samples, 0.31%)</title><rect x="561.3" y="245" width="3.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="564.33" y="255.5" ></text>
</g>
<g >
<title>complete_walk (89,568,445 samples, 0.97%)</title><rect x="793.9" y="181" width="11.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="796.89" y="191.5" ></text>
</g>
<g >
<title>rebalance_domains (27,221,960 samples, 0.30%)</title><rect x="240.4" y="245" width="3.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="243.41" y="255.5" ></text>
</g>
<g >
<title>dput (27,014,995 samples, 0.29%)</title><rect x="529.3" y="245" width="3.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="532.31" y="255.5" ></text>
</g>
<g >
<title>filemap_get_entry (111,265,396 samples, 1.21%)</title><rect x="357.7" y="101" width="14.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="360.72" y="111.5" ></text>
</g>
<g >
<title>posix.close (639,359,052 samples, 6.94%)</title><rect x="518.7" y="357" width="81.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="521.69" y="367.5" >posix.close</text>
</g>
<g >
<title>search_name.SearchIterator.next (9,181,528,994 samples, 99.70%)</title><rect x="13.5" y="405" width="1176.5" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="16.54" y="415.5" >search_name.SearchIterator.next</text>
</g>
<g >
<title>ext4_bread (444,617,685 samples, 4.83%)</title><rect x="340.0" y="181" width="57.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="343.00" y="191.5" >ext4_b..</text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (27,371,531 samples, 0.30%)</title><rect x="1186.5" y="341" width="3.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1189.49" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_lock (28,157,988 samples, 0.31%)</title><rect x="579.3" y="245" width="3.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="582.26" y="255.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (83,696,090 samples, 0.91%)</title><rect x="13.5" y="389" width="10.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="16.54" y="399.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (27,221,960 samples, 0.30%)</title><rect x="240.4" y="309" width="3.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="243.41" y="319.5" ></text>
</g>
<g >
<title>is_dx_dir (27,426,825 samples, 0.30%)</title><rect x="465.2" y="229" width="3.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="468.18" y="239.5" ></text>
</g>
<g >
<title>atime_needs_update (83,497,029 samples, 0.91%)</title><rect x="475.8" y="229" width="10.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="478.85" y="239.5" ></text>
</g>
<g >
<title>__memset (55,873,369 samples, 0.61%)</title><rect x="761.7" y="117" width="7.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="764.70" y="127.5" ></text>
</g>
<g >
<title>str2hashbuf_signed (56,491,354 samples, 0.61%)</title><rect x="447.2" y="165" width="7.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="450.20" y="175.5" ></text>
</g>
<g >
<title>__ext4_check_dir_entry (28,168,330 samples, 0.31%)</title><rect x="336.4" y="197" width="3.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="339.39" y="207.5" ></text>
</g>
<g >
<title>housekeeping_test_cpu (27,251,202 samples, 0.30%)</title><rect x="382.7" y="117" width="3.5" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="385.70" y="127.5" ></text>
</g>
<g >
<title>search_name_run (9,209,123,911 samples, 100.00%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >search_name_run</text>
</g>
<g >
<title>all (9,209,123,911 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>call_filldir (140,057,773 samples, 1.52%)</title><rect x="293.3" y="229" width="18.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="296.34" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_getdents64 (1,783,116,774 samples, 19.36%)</title><rect x="258.1" y="277" width="228.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="261.07" y="287.5" >__x64_sys_getdents64</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (452,941,619 samples, 4.92%)</title><rect x="604.2" y="357" width="58.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="607.16" y="367.5" >compil..</text>
</g>
<g >
<title>start.callMainWithArgs (9,181,528,994 samples, 99.70%)</title><rect x="13.5" y="453" width="1176.5" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="16.54" y="463.5" >start.callMainWithArgs</text>
</g>
<g >
<title>valgrind.doClientRequest (28,126,618 samples, 0.31%)</title><rect x="945.2" y="261" width="3.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="948.19" y="271.5" ></text>
</g>
<g >
<title>[unknown] (56,396,921 samples, 0.61%)</title><rect x="819.6" y="117" width="7.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="822.60" y="127.5" ></text>
</g>
<g >
<title>alloc_fd (109,887,056 samples, 1.19%)</title><rect x="704.9" y="213" width="14.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="707.93" y="223.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (110,909,153 samples, 1.20%)</title><rect x="187.0" y="325" width="14.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="189.96" y="335.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (55,447,811 samples, 0.60%)</title><rect x="564.9" y="245" width="7.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="567.94" y="255.5" ></text>
</g>
<g >
<title>__kmem_cache_free (56,675,626 samples, 0.62%)</title><rect x="532.8" y="229" width="7.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="535.78" y="239.5" ></text>
</g>
<g >
<title>ext4_readdir (1,451,647,260 samples, 15.76%)</title><rect x="286.3" y="245" width="186.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="289.26" y="255.5" >ext4_readdir</text>
</g>
<g >
<title>__ext4fs_dirhash (196,390,119 samples, 2.13%)</title><rect x="429.3" y="181" width="25.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="432.28" y="191.5" >_..</text>
</g>
<g >
<title>__fget_light (55,636,352 samples, 0.60%)</title><rect x="848.3" y="165" width="7.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="851.26" y="175.5" ></text>
</g>
<g >
<title>mem.alignForward__anon_3954 (27,501,382 samples, 0.30%)</title><rect x="211.9" y="293" width="3.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="214.90" y="303.5" ></text>
</g>
<g >
<title>mem.sliceTo__anon_7548 (195,501,627 samples, 2.12%)</title><rect x="204.8" y="341" width="25.0" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="207.75" y="351.5" >m..</text>
</g>
<g >
<title>fs.Dir.Walker.next (7,215,357,337 samples, 78.35%)</title><rect x="24.3" y="389" width="924.5" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="27.26" y="399.5" >fs.Dir.Walker.next</text>
</g>
<g >
<title>close_fd_get_file (28,157,988 samples, 0.31%)</title><rect x="579.3" y="261" width="3.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="582.26" y="271.5" ></text>
</g>
<g >
<title>os.linux.openat (1,791,324,748 samples, 19.45%)</title><rect x="690.7" y="309" width="229.5" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="693.69" y="319.5" >os.linux.openat</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (83,705,594 samples, 0.91%)</title><rect x="589.9" y="309" width="10.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="592.89" y="319.5" ></text>
</g>
<g >
<title>__memset (55,724,923 samples, 0.61%)</title><rect x="884.3" y="181" width="7.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="887.31" y="191.5" ></text>
</g>
<g >
<title>do_sys_openat2 (1,538,931,562 samples, 16.71%)</title><rect x="701.3" y="229" width="197.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="704.33" y="239.5" >do_sys_openat2</text>
</g>
<g >
<title>os.linux.close (639,359,052 samples, 6.94%)</title><rect x="518.7" y="341" width="81.9" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="521.69" y="351.5" >os.linux...</text>
</g>
<g >
<title>__kmalloc (111,913,415 samples, 1.22%)</title><rect x="400.6" y="181" width="14.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="403.57" y="191.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (27,984,316 samples, 0.30%)</title><rect x="712.1" y="165" width="3.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="715.07" y="175.5" ></text>
</g>
<g >
<title>security_file_alloc (223,346,481 samples, 2.43%)</title><rect x="740.2" y="149" width="28.7" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="743.24" y="159.5" >se..</text>
</g>
<g >
<title>vfs_open (27,630,885 samples, 0.30%)</title><rect x="870.0" y="181" width="3.5" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="872.96" y="191.5" ></text>
</g>
<g >
<title>make_vfsuid (27,958,484 samples, 0.30%)</title><rect x="483.0" y="213" width="3.5" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="485.96" y="223.5" ></text>
</g>
<g >
<title>mem.eql__anon_5137 (1,576,291,300 samples, 17.12%)</title><rect x="984.5" y="341" width="202.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="987.52" y="351.5" >mem.eql__anon_5137</text>
</g>
<g >
<title>security_inode_permission (28,098,496 samples, 0.31%)</title><rect x="830.4" y="165" width="3.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="833.43" y="175.5" ></text>
</g>
<g >
<title>fs.Dir.openDirZ (1,902,760,423 samples, 20.66%)</title><rect x="680.0" y="357" width="243.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="682.98" y="367.5" >fs.Dir.openDirZ</text>
</g>
<g >
<title>__legitimize_path (61,683,533 samples, 0.67%)</title><rect x="797.5" y="149" width="7.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="800.47" y="159.5" ></text>
</g>
<g >
<title>security_file_open (111,627,122 samples, 1.21%)</title><rect x="812.5" y="165" width="14.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="815.52" y="175.5" ></text>
</g>
<g >
<title>mem.eqlBytes (1,349,825,801 samples, 14.66%)</title><rect x="992.2" y="325" width="172.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="995.16" y="335.5" >mem.eqlBytes</text>
</g>
<g >
<title>fs.Dir.close (639,359,052 samples, 6.94%)</title><rect x="518.7" y="373" width="81.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="521.69" y="383.5" >fs.Dir.cl..</text>
</g>
<g >
<title>start.posixCallMainAndExit (9,181,528,994 samples, 99.70%)</title><rect x="13.5" y="469" width="1176.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="16.54" y="479.5" >start.posixCallMainAndExit</text>
</g>
<g >
<title>mutex_lock (54,260,198 samples, 0.59%)</title><rect x="261.7" y="245" width="6.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="264.68" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_close (528,477,959 samples, 5.74%)</title><rect x="522.2" y="277" width="67.7" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="525.18" y="287.5" >__x64_s..</text>
</g>
<g >
<title>memchr (28,136,898 samples, 0.31%)</title><rect x="307.7" y="181" width="3.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="310.68" y="191.5" ></text>
</g>
<g >
<title>__rcu_read_lock (56,214,053 samples, 0.61%)</title><rect x="855.4" y="165" width="7.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="858.39" y="175.5" ></text>
</g>
<g >
<title>__legitimize_mnt (33,579,459 samples, 0.36%)</title><rect x="797.5" y="133" width="4.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="800.47" y="143.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).ensureUnusedCapacity (27,254,803 samples, 0.30%)</title><rect x="63.4" y="373" width="3.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="66.39" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,677,618,334 samples, 18.22%)</title><rect x="690.7" y="277" width="215.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="693.69" y="287.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>start.callMain (9,181,528,994 samples, 99.70%)</title><rect x="13.5" y="437" width="1176.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="16.54" y="447.5" >start.callMain</text>
</g>
<g >
<title>verify_dirent_name (28,136,898 samples, 0.31%)</title><rect x="307.7" y="197" width="3.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="310.68" y="207.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (27,790,669 samples, 0.30%)</title><rect x="52.6" y="357" width="3.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="55.65" y="367.5" ></text>
</g>
<g >
<title>update_process_times (27,984,316 samples, 0.30%)</title><rect x="712.1" y="85" width="3.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="715.07" y="95.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (57,983,567 samples, 0.63%)</title><rect x="912.8" y="277" width="7.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="915.79" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (27,984,316 samples, 0.30%)</title><rect x="712.1" y="197" width="3.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="715.07" y="207.5" ></text>
</g>
<g >
<title>__check_object_size (55,150,167 samples, 0.60%)</title><rect x="891.5" y="181" width="7.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="894.45" y="191.5" ></text>
</g>
<g >
<title>security_inode_permission (27,398,985 samples, 0.30%)</title><rect x="844.7" y="165" width="3.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="847.75" y="175.5" ></text>
</g>
<g >
<title>mem.indexOfPos__anon_4210 (1,882,475,567 samples, 20.44%)</title><rect x="948.8" y="373" width="241.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="951.79" y="383.5" >mem.indexOfPos__anon_4210</text>
</g>
<g >
<title>ext4_map_blocks (84,105,719 samples, 0.91%)</title><rect x="386.2" y="149" width="10.8" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="389.20" y="159.5" ></text>
</g>
<g >
<title>try_to_unlazy (89,568,445 samples, 0.97%)</title><rect x="793.9" y="165" width="11.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="796.89" y="175.5" ></text>
</g>
<g >
<title>tick_sched_timer (27,984,316 samples, 0.30%)</title><rect x="712.1" y="117" width="3.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="715.07" y="127.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (27,594,917 samples, 0.30%)</title><rect x="10.0" y="469" width="3.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>path_openat (1,067,594,987 samples, 11.59%)</title><rect x="736.7" y="197" width="136.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="739.71" y="207.5" >path_openat</text>
</g>
<g >
<title>entry_SYSCALL_64 (27,594,917 samples, 0.30%)</title><rect x="10.0" y="453" width="3.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (27,465,013 samples, 0.30%)</title><rect x="902.1" y="229" width="3.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="905.13" y="239.5" ></text>
</g>
<g >
<title>put_pid (28,427,614 samples, 0.31%)</title><rect x="572.0" y="245" width="3.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="575.05" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages (29,129,646 samples, 0.32%)</title><rect x="772.4" y="117" width="3.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="775.38" y="127.5" ></text>
</g>
<g >
<title>__check_block_validity.constprop.0 (27,764,276 samples, 0.30%)</title><rect x="386.2" y="133" width="3.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="389.20" y="143.5" ></text>
</g>
<g >
<title>__find_get_block (360,511,966 samples, 3.91%)</title><rect x="340.0" y="133" width="46.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="343.00" y="143.5" >__fi..</text>
</g>
<g >
<title>x64_sys_call (27,869,450 samples, 0.30%)</title><rect x="486.5" y="277" width="3.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="489.55" y="287.5" ></text>
</g>
<g >
<title>posix.openatZ (1,819,157,370 samples, 19.75%)</title><rect x="690.7" y="325" width="233.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="693.69" y="335.5" >posix.openatZ</text>
</g>
<g >
<title>fd_install (28,297,415 samples, 0.31%)</title><rect x="873.5" y="213" width="3.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="876.50" y="223.5" ></text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (56,247,543 samples, 0.61%)</title><rect x="826.8" y="181" width="7.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="829.83" y="191.5" ></text>
</g>
<g >
<title>_raw_read_lock (56,341,443 samples, 0.61%)</title><rect x="389.8" y="117" width="7.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="392.75" y="127.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (27,919,426 samples, 0.30%)</title><rect x="201.2" y="341" width="3.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="204.18" y="351.5" ></text>
</g>
<g >
<title>load_balance (27,221,960 samples, 0.30%)</title><rect x="240.4" y="229" width="3.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="243.41" y="239.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (55,523,049 samples, 0.60%)</title><rect x="375.6" y="101" width="7.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="378.59" y="111.5" ></text>
</g>
<g >
<title>find_busiest_group (27,221,960 samples, 0.30%)</title><rect x="240.4" y="213" width="3.5" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="243.41" y="223.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall3 (2,254,600,847 samples, 24.48%)</title><rect x="229.8" y="325" width="288.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="232.80" y="335.5" >os.linux.x86_64.syscall3</text>
</g>
<g >
<title>clear_page_erms (29,129,646 samples, 0.32%)</title><rect x="772.4" y="85" width="3.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="775.38" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,810,986,224 samples, 19.67%)</title><rect x="258.1" y="293" width="232.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="261.07" y="303.5" >do_syscall_64</text>
</g>
<g >
<title>__fput (417,991,198 samples, 4.54%)</title><rect x="525.7" y="261" width="53.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="528.70" y="271.5" >__fput</text>
</g>
<g >
<title>free_rb_tree_fname (55,442,579 samples, 0.60%)</title><rect x="540.0" y="229" width="7.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="543.04" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,838,910,952 samples, 19.97%)</title><rect x="254.5" y="309" width="235.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="257.49" y="319.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>allocate_slab (29,129,646 samples, 0.32%)</title><rect x="772.4" y="133" width="3.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="775.38" y="143.5" ></text>
</g>
<g >
<title>valgrind.runningOnValgrind (27,570,965 samples, 0.30%)</title><rect x="208.4" y="277" width="3.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="211.36" y="287.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (27,663,254 samples, 0.30%)</title><rect x="600.6" y="357" width="3.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="603.62" y="367.5" ></text>
</g>
<g >
<title>strncpy_from_user (55,150,167 samples, 0.60%)</title><rect x="891.5" y="197" width="7.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="894.45" y="207.5" ></text>
</g>
<g >
<title>valgrind.doClientRequestExpr (28,126,618 samples, 0.31%)</title><rect x="945.2" y="277" width="3.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="948.19" y="287.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (83,732,543 samples, 0.91%)</title><rect x="400.6" y="165" width="10.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="403.57" y="175.5" ></text>
</g>
<g >
<title>scheduler_tick (27,984,316 samples, 0.30%)</title><rect x="712.1" y="69" width="3.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="715.07" y="79.5" ></text>
</g>
<g >
<title>path_init (111,850,405 samples, 1.21%)</title><rect x="848.3" y="181" width="14.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="851.26" y="191.5" ></text>
</g>
<g >
<title>ext4_release_dir (139,775,209 samples, 1.52%)</title><rect x="532.8" y="245" width="17.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="535.78" y="255.5" ></text>
</g>
<g >
<title>ext4fs_dirhash (252,708,263 samples, 2.74%)</title><rect x="422.1" y="197" width="32.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="425.06" y="207.5" >ex..</text>
</g>
<g >
<title>__virt_addr_valid (55,150,167 samples, 0.60%)</title><rect x="891.5" y="165" width="7.0" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="894.45" y="175.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (27,802,788 samples, 0.30%)</title><rect x="145.0" y="357" width="3.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="148.03" y="367.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (167,275,920 samples, 1.82%)</title><rect x="768.9" y="165" width="21.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="771.86" y="175.5" >k..</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendSliceAssumeCapacity (56,057,886 samples, 0.61%)</title><rect x="56.2" y="373" width="7.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="59.21" y="383.5" ></text>
</g>
<g >
<title>free_rb_tree_fname (27,674,289 samples, 0.30%)</title><rect x="454.4" y="229" width="3.6" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="457.44" y="239.5" ></text>
</g>
<g >
<title>lookup_fast (55,557,588 samples, 0.60%)</title><rect x="834.0" y="181" width="7.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="837.03" y="191.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (28,132,862 samples, 0.31%)</title><rect x="923.8" y="341" width="3.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="926.79" y="351.5" ></text>
</g>
<g >
<title>fs.Dir.openDir (2,689,599,713 samples, 29.21%)</title><rect x="604.2" y="373" width="344.6" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="607.16" y="383.5" >fs.Dir.openDir</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (56,057,886 samples, 0.61%)</title><rect x="56.2" y="357" width="7.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="59.21" y="367.5" ></text>
</g>
<g >
<title>tick_sched_handle (27,984,316 samples, 0.30%)</title><rect x="712.1" y="101" width="3.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="715.07" y="111.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (28,194,982 samples, 0.31%)</title><rect x="515.1" y="309" width="3.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="518.08" y="319.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (28,099,647 samples, 0.31%)</title><rect x="790.3" y="165" width="3.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="793.29" y="175.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (27,443,509 samples, 0.30%)</title><rect x="38.5" y="357" width="3.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="41.54" y="367.5" ></text>
</g>
<g >
<title>init_file (250,914,794 samples, 2.72%)</title><rect x="736.7" y="165" width="32.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="739.71" y="175.5" >in..</text>
</g>
<g >
<title>__d_lookup_rcu (55,557,588 samples, 0.60%)</title><rect x="834.0" y="165" width="7.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="837.03" y="175.5" ></text>
</g>
<g >
<title>compiler_rt.memset.memset (27,599,979 samples, 0.30%)</title><rect x="137.9" y="373" width="3.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="140.90" y="383.5" ></text>
</g>
<g >
<title>touch_atime (83,497,029 samples, 0.91%)</title><rect x="475.8" y="245" width="10.7" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="478.85" y="255.5" ></text>
</g>
<g >
<title>___slab_alloc (56,574,346 samples, 0.61%)</title><rect x="768.9" y="149" width="7.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="771.86" y="159.5" ></text>
</g>
<g >
<title>os.linux.getdents64 (2,254,600,847 samples, 24.48%)</title><rect x="229.8" y="341" width="288.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="232.80" y="351.5" >os.linux.getdents64</text>
</g>
<g >
<title>get_page_from_freelist (29,129,646 samples, 0.32%)</title><rect x="772.4" y="101" width="3.7" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="775.38" y="111.5" ></text>
</g>
<g >
<title>ext4_sb_block_valid (27,764,276 samples, 0.30%)</title><rect x="386.2" y="117" width="3.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="389.20" y="127.5" ></text>
</g>
<g >
<title>xas_start (27,598,193 samples, 0.30%)</title><rect x="368.4" y="69" width="3.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="371.44" y="79.5" ></text>
</g>
<g >
<title>xas_load (27,598,193 samples, 0.30%)</title><rect x="368.4" y="85" width="3.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="371.44" y="95.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).pop (27,443,509 samples, 0.30%)</title><rect x="38.5" y="373" width="3.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="41.54" y="383.5" ></text>
</g>
<g >
<title>perf_event_task_tick (27,984,316 samples, 0.30%)</title><rect x="712.1" y="53" width="3.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="715.07" y="63.5" ></text>
</g>
<g >
<title>do_filp_open (1,205,717,525 samples, 13.09%)</title><rect x="719.0" y="213" width="154.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="722.01" y="223.5" >do_filp_open</text>
</g>
<g >
<title>do_syscall_64 (1,650,087,869 samples, 17.92%)</title><rect x="694.2" y="261" width="211.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="697.22" y="271.5" >do_syscall_64</text>
</g>
<g >
<title>alloc_empty_file (446,290,361 samples, 4.85%)</title><rect x="736.7" y="181" width="57.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="739.71" y="191.5" >alloc_..</text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (639,359,052 samples, 6.94%)</title><rect x="518.7" y="325" width="81.9" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="521.69" y="335.5" >os.linux...</text>
</g>
<g >
<title>__brelse (55,451,851 samples, 0.60%)</title><rect x="329.3" y="197" width="7.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="332.29" y="207.5" ></text>
</g>
<g >
<title>mem.indexOfScalarPos__anon_7261 (139,661,710 samples, 1.52%)</title><rect x="930.9" y="325" width="17.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="933.90" y="335.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_3782.nextLinux (2,888,377,462 samples, 31.36%)</title><rect x="148.6" y="357" width="370.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="151.60" y="367.5" >fs.Dir.Iterator__struct_3782.nextLinux</text>
</g>
<g >
<title>kmalloc_slab (28,180,872 samples, 0.31%)</title><rect x="411.3" y="165" width="3.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="414.30" y="175.5" ></text>
</g>
<g >
<title>__filemap_get_folio (111,265,396 samples, 1.21%)</title><rect x="357.7" y="117" width="14.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="360.72" y="127.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (27,832,622 samples, 0.30%)</title><rect x="920.2" y="309" width="3.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="923.22" y="319.5" ></text>
</g>
<g >
<title>ext4_htree_fill_tree (1,117,278,960 samples, 12.13%)</title><rect x="311.3" y="229" width="143.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="314.28" y="239.5" >ext4_htree_fill_tree</text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (27,443,243 samples, 0.30%)</title><rect x="786.8" y="149" width="3.5" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="789.78" y="159.5" ></text>
</g>
<g >
<title>locks_remove_posix (54,803,235 samples, 0.60%)</title><rect x="582.9" y="245" width="7.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="585.87" y="255.5" ></text>
</g>
<g >
<title>mem.alignBackward__anon_7461 (27,501,382 samples, 0.30%)</title><rect x="211.9" y="277" width="3.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="214.90" y="287.5" ></text>
</g>
<g >
<title>__kmem_cache_free (55,442,579 samples, 0.60%)</title><rect x="540.0" y="213" width="7.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="543.04" y="223.5" ></text>
</g>
<g >
<title>__get_obj_cgroup_from_memcg (83,258,331 samples, 0.90%)</title><rect x="776.1" y="133" width="10.7" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="779.11" y="143.5" ></text>
</g>
<g >
<title>mem.eqlBytes (83,815,861 samples, 0.91%)</title><rect x="176.2" y="325" width="10.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="179.23" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1,594,404,048 samples, 17.31%)</title><rect x="694.2" y="245" width="204.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="697.22" y="255.5" >__x64_sys_openat</text>
</g>
<g >
<title>bpf_lsm_file_open (111,627,122 samples, 1.21%)</title><rect x="812.5" y="149" width="14.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="815.52" y="159.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (27,984,316 samples, 0.30%)</title><rect x="712.1" y="181" width="3.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="715.07" y="191.5" ></text>
</g>
<g >
<title>__fsnotify_parent (27,398,707 samples, 0.30%)</title><rect x="272.1" y="245" width="3.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="275.14" y="255.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (55,683,821 samples, 0.60%)</title><rect x="898.5" y="245" width="7.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="901.52" y="255.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (27,984,316 samples, 0.30%)</title><rect x="712.1" y="133" width="3.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="715.07" y="143.5" ></text>
</g>
<g >
<title>[unknown] (27,594,917 samples, 0.30%)</title><rect x="10.0" y="485" width="3.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>hook_file_alloc_security (55,859,143 samples, 0.61%)</title><rect x="754.5" y="133" width="7.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="757.54" y="143.5" ></text>
</g>
<g >
<title>getname (27,863,822 samples, 0.30%)</title><rect x="877.1" y="213" width="3.6" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="880.13" y="223.5" ></text>
</g>
<g >
<title>fs.Dir.iterateAssumeFirstIteration (27,663,254 samples, 0.30%)</title><rect x="600.6" y="373" width="3.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="603.62" y="383.5" ></text>
</g>
<g >
<title>compiler_rt.stack_probe.zig_probe_stack (55,920,911 samples, 0.61%)</title><rect x="672.8" y="357" width="7.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="675.82" y="367.5" ></text>
</g>
<g >
<title>search_name_runner.main (9,181,528,994 samples, 99.70%)</title><rect x="13.5" y="421" width="1176.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="16.54" y="431.5" >search_name_runner.main</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).append (82,671,868 samples, 0.90%)</title><rect x="42.1" y="373" width="10.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="45.06" y="383.5" ></text>
</g>
<g >
<title>lockref_put_return (27,014,995 samples, 0.29%)</title><rect x="529.3" y="229" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="532.31" y="239.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (55,873,369 samples, 0.61%)</title><rect x="761.7" y="133" width="7.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="764.70" y="143.5" ></text>
</g>
<g >
<title>mntput_no_expire (27,760,072 samples, 0.30%)</title><rect x="866.4" y="165" width="3.6" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="869.41" y="175.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (56,341,443 samples, 0.61%)</title><rect x="389.8" y="133" width="7.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="392.75" y="143.5" ></text>
</g>
<g >
<title>bpf_get_current_cgroup_id (27,988,567 samples, 0.30%)</title><rect x="823.2" y="101" width="3.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="826.24" y="111.5" ></text>
</g>
<g >
<title>iterate_dir (1,700,687,724 samples, 18.47%)</title><rect x="268.6" y="261" width="217.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="271.63" y="271.5" >iterate_dir</text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (166,836,759 samples, 1.81%)</title><rect x="1165.1" y="325" width="21.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1168.12" y="335.5" >m..</text>
</g>
<g >
<title>down_read_killable (82,796,659 samples, 0.90%)</title><rect x="275.7" y="245" width="10.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="278.65" y="255.5" ></text>
</g>
<g >
<title>dput (29,762,997 samples, 0.32%)</title><rect x="862.6" y="165" width="3.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="865.59" y="175.5" ></text>
</g>
<g >
<title>get_obj_cgroup_from_current (83,258,331 samples, 0.90%)</title><rect x="776.1" y="149" width="10.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="779.11" y="159.5" ></text>
</g>
<g >
<title>expand_files (26,149,191 samples, 0.28%)</title><rect x="715.7" y="197" width="3.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="718.66" y="207.5" ></text>
</g>
<g >
<title>getname_flags.part.0 (139,061,600 samples, 1.51%)</title><rect x="880.7" y="213" width="17.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="883.70" y="223.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOne (54,888,607 samples, 0.60%)</title><rect x="45.6" y="357" width="7.0" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="48.62" y="367.5" ></text>
</g>
<g >
<title>terminate_walk (57,523,069 samples, 0.62%)</title><rect x="862.6" y="181" width="7.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="865.59" y="191.5" ></text>
</g>
<g >
<title>__ext4_read_dirblock (444,617,685 samples, 4.83%)</title><rect x="340.0" y="197" width="57.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="343.00" y="207.5" >__ext4..</text>
</g>
<g >
<title>may_open (55,470,755 samples, 0.60%)</title><rect x="841.2" y="181" width="7.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="844.15" y="191.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (27,984,316 samples, 0.30%)</title><rect x="712.1" y="149" width="3.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="715.07" y="159.5" ></text>
</g>
<g >
<title>start._start (9,181,528,994 samples, 99.70%)</title><rect x="13.5" y="485" width="1176.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="16.54" y="495.5" >start._start</text>
</g>
<g >
<title>_find_next_zero_bit (27,932,831 samples, 0.30%)</title><rect x="708.5" y="197" width="3.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="711.49" y="207.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (554,210,571 samples, 6.02%)</title><rect x="66.9" y="373" width="71.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="69.89" y="383.5" >compiler..</text>
</g>
<g >
<title>compiler_rt.memset.memset (82,848,966 samples, 0.90%)</title><rect x="662.2" y="357" width="10.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="665.20" y="367.5" ></text>
</g>
<g >
<title>cache_from_obj (28,188,767 samples, 0.31%)</title><rect x="561.3" y="229" width="3.6" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="564.33" y="239.5" ></text>
</g>
<g >
<title>mem.indexOfPosLinear__anon_7770 (1,882,475,567 samples, 20.44%)</title><rect x="948.8" y="357" width="241.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="951.79" y="367.5" >mem.indexOfPosLinear__anon_7770</text>
</g>
<g >
<title>__irq_exit_rcu (27,221,960 samples, 0.30%)</title><rect x="240.4" y="277" width="3.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="243.41" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (555,653,458 samples, 6.03%)</title><rect x="518.7" y="309" width="71.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="521.69" y="319.5" >entry_SY..</text>
</g>
<g >
<title>valgrind.runningOnValgrind (28,126,618 samples, 0.31%)</title><rect x="945.2" y="293" width="3.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="948.19" y="303.5" ></text>
</g>
<g >
<title>kfree (27,657,004 samples, 0.30%)</title><rect x="547.1" y="229" width="3.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="550.14" y="239.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (1,791,324,748 samples, 19.45%)</title><rect x="690.7" y="293" width="229.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="693.69" y="303.5" >os.linux.x86_64.syscall4</text>
</g>
<g >
<title>filp_flush (54,803,235 samples, 0.60%)</title><rect x="582.9" y="261" width="7.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="585.87" y="271.5" ></text>
</g>
<g >
<title>__memcpy (55,787,029 samples, 0.61%)</title><rect x="414.9" y="181" width="7.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="417.91" y="191.5" ></text>
</g>
<g >
<title>ext4_getblk (444,617,685 samples, 4.83%)</title><rect x="340.0" y="165" width="57.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="343.00" y="175.5" >ext4_g..</text>
</g>
<g >
<title>rcu_segcblist_enqueue (27,525,538 samples, 0.30%)</title><rect x="522.2" y="245" width="3.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="525.18" y="255.5" ></text>
</g>
<g >
<title>htree_dirblock_to_tree (1,061,053,265 samples, 11.52%)</title><rect x="318.5" y="213" width="135.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="321.49" y="223.5" >htree_dirblock_to..</text>
</g>
<g >
<title>simd.firstTrue__anon_8148 (112,258,803 samples, 1.22%)</title><rect x="215.4" y="293" width="14.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="218.42" y="303.5" ></text>
</g>
<g >
<title>security_file_free (27,897,178 samples, 0.30%)</title><rect x="575.7" y="245" width="3.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="578.69" y="255.5" ></text>
</g>
<g >
<title>fsnotify (27,952,010 samples, 0.30%)</title><rect x="472.3" y="229" width="3.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="475.27" y="239.5" ></text>
</g>
<g >
<title>mem.lenSliceTo__anon_8499 (195,501,627 samples, 2.12%)</title><rect x="204.8" y="325" width="25.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="207.75" y="335.5" >m..</text>
</g>
<g >
<title>posix.toPosixPath (195,127,794 samples, 2.12%)</title><rect x="923.8" y="357" width="25.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="926.79" y="367.5" >p..</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (27,592,645 samples, 0.30%)</title><rect x="49.1" y="341" width="3.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="52.11" y="351.5" ></text>
</g>
<g >
<title>make_vfsgid (28,134,952 samples, 0.31%)</title><rect x="479.4" y="213" width="3.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="482.36" y="223.5" ></text>
</g>
<g >
<title>inode_query_iversion (56,158,075 samples, 0.61%)</title><rect x="458.0" y="229" width="7.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="460.99" y="239.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (194,836,600 samples, 2.12%)</title><rect x="490.1" y="309" width="25.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="493.12" y="319.5" >e..</text>
</g>
<g >
<title>mem.eql__anon_5137 (268,904,995 samples, 2.92%)</title><rect x="166.7" y="341" width="34.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="169.72" y="351.5" >me..</text>
</g>
<g >
<title>rb_next (27,830,134 samples, 0.30%)</title><rect x="468.7" y="229" width="3.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="471.70" y="239.5" ></text>
</g>
<g >
<title>__fdget_pos (82,429,050 samples, 0.90%)</title><rect x="258.1" y="261" width="10.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="261.07" y="271.5" ></text>
</g>
<g >
<title>[[x_tables]] (56,396,921 samples, 0.61%)</title><rect x="819.6" y="133" width="7.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="822.60" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (555,653,458 samples, 6.03%)</title><rect x="518.7" y="293" width="71.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="521.69" y="303.5" >do_sysca..</text>
</g>
<g >
<title>debug.inValgrind (27,570,965 samples, 0.30%)</title><rect x="208.4" y="293" width="3.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="211.36" y="303.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (27,221,960 samples, 0.30%)</title><rect x="240.4" y="197" width="3.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="243.41" y="207.5" ></text>
</g>
</g>
</svg>
