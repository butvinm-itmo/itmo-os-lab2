<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>enqueue_entity (11,396,733 samples, 0.05%)</title><rect x="888.2" y="53" width="0.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="891.16" y="63.5" ></text>
</g>
<g >
<title>mntput_no_expire (10,069,096 samples, 0.04%)</title><rect x="657.1" y="277" width="0.5" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="660.12" y="287.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="341" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1025.76" y="351.5" ></text>
</g>
<g >
<title>kmalloc_slab (21,387,409 samples, 0.09%)</title><rect x="493.4" y="197" width="1.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="496.44" y="207.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (186,303,241 samples, 0.76%)</title><rect x="27.6" y="421" width="9.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="30.59" y="431.5" ></text>
</g>
<g >
<title>meta.hasUniqueRepresentation (22,247,946 samples, 0.09%)</title><rect x="255.0" y="357" width="1.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="257.99" y="367.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).addOne (84,513,932 samples, 0.35%)</title><rect x="53.6" y="389" width="4.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="56.62" y="399.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (23,215,360 samples, 0.09%)</title><rect x="606.6" y="293" width="1.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="609.59" y="303.5" ></text>
</g>
<g >
<title>mem.indexOf__anon_3903 (4,053,041,954 samples, 16.58%)</title><rect x="994.4" y="421" width="195.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="997.40" y="431.5" >mem.indexOf__anon_3903</text>
</g>
<g >
<title>mem.indexOfPos__anon_4210 (4,000,129,097 samples, 16.36%)</title><rect x="997.0" y="405" width="193.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="999.96" y="415.5" >mem.indexOfPos__anon_4210</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).ensureUnusedCapacity (31,563,542 samples, 0.13%)</title><rect x="77.8" y="405" width="1.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="80.79" y="415.5" ></text>
</g>
<g >
<title>rb_next (75,751,967 samples, 0.31%)</title><rect x="565.2" y="261" width="3.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="568.25" y="271.5" ></text>
</g>
<g >
<title>start.posixCallMainAndExit (24,150,294,503 samples, 98.77%)</title><rect x="24.5" y="501" width="1165.5" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="27.52" y="511.5" >start.posixCallMainAndExit</text>
</g>
<g >
<title>percpu_counter_add_batch (9,897,303 samples, 0.04%)</title><rect x="657.6" y="277" width="0.5" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="660.61" y="287.5" ></text>
</g>
<g >
<title>__ext4_read_dirblock (1,531,720,106 samples, 6.26%)</title><rect x="401.4" y="229" width="73.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="404.39" y="239.5" >__ext4_r..</text>
</g>
<g >
<title>__call_rcu_common (152,396,904 samples, 0.62%)</title><rect x="629.6" y="293" width="7.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="632.55" y="303.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (67,240,988 samples, 0.28%)</title><rect x="574.2" y="277" width="3.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="577.19" y="287.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (39,017,113 samples, 0.16%)</title><rect x="69.1" y="373" width="1.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="72.11" y="383.5" ></text>
</g>
<g >
<title>__kmem_cache_free (21,751,850 samples, 0.09%)</title><rect x="531.1" y="245" width="1.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="534.15" y="255.5" ></text>
</g>
<g >
<title>fs.Dir.iterateAssumeFirstIteration (164,987,289 samples, 0.67%)</title><rect x="682.1" y="405" width="7.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="685.05" y="415.5" ></text>
</g>
<g >
<title>__check_block_validity.constprop.0 (167,487,391 samples, 0.68%)</title><rect x="459.3" y="165" width="8.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="462.33" y="175.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_3782.next (8,416,145,694 samples, 34.42%)</title><rect x="207.8" y="405" width="406.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="210.81" y="415.5" >fs.Dir.Iterator__struct_3782.next</text>
</g>
<g >
<title>get_obj_cgroup_from_current (77,812,731 samples, 0.32%)</title><rect x="833.4" y="181" width="3.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="836.35" y="191.5" ></text>
</g>
<g >
<title>init_file (205,592,483 samples, 0.84%)</title><rect x="817.1" y="197" width="9.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="820.11" y="207.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (12,248,922 samples, 0.05%)</title><rect x="664.0" y="229" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="666.98" y="239.5" ></text>
</g>
<g >
<title>mem.eql__anon_5137 (3,346,408,889 samples, 13.69%)</title><rect x="1025.6" y="373" width="161.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1028.59" y="383.5" >mem.eql__anon_5137</text>
</g>
<g >
<title>[unknown] (193,594,027 samples, 0.79%)</title><rect x="874.4" y="149" width="9.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="877.36" y="159.5" ></text>
</g>
<g >
<title>close_fd_get_file (27,973,038 samples, 0.11%)</title><rect x="660.2" y="293" width="1.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="663.16" y="303.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendAssumeCapacity (65,009,468 samples, 0.27%)</title><rect x="71.0" y="405" width="3.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="74.00" y="415.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).append (138,754,935 samples, 0.57%)</title><rect x="64.3" y="405" width="6.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="67.30" y="415.5" ></text>
</g>
<g >
<title>__slab_free (51,603,478 samples, 0.21%)</title><rect x="650.3" y="245" width="2.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="653.30" y="255.5" ></text>
</g>
<g >
<title>mem.eql__anon_5137 (419,289,300 samples, 1.71%)</title><rect x="235.8" y="373" width="20.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="238.82" y="383.5" ></text>
</g>
<g >
<title>path_init (115,761,144 samples, 0.47%)</title><rect x="929.5" y="213" width="5.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="932.52" y="223.5" ></text>
</g>
<g >
<title>ext4_getblk (1,509,160,285 samples, 6.17%)</title><rect x="402.5" y="197" width="72.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="405.48" y="207.5" >ext4_get..</text>
</g>
<g >
<title>fs.Dir.iterateImpl (27,048,116 samples, 0.11%)</title><rect x="688.7" y="389" width="1.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="691.71" y="399.5" ></text>
</g>
<g >
<title>amd_clear_divider (8,958,953 samples, 0.04%)</title><rect x="668.5" y="293" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="671.54" y="303.5" ></text>
</g>
<g >
<title>os.linux.errnoFromSyscall (26,766,373 samples, 0.11%)</title><rect x="612.7" y="389" width="1.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="615.68" y="399.5" ></text>
</g>
<g >
<title>__check_object_size (129,752,136 samples, 0.53%)</title><rect x="957.1" y="213" width="6.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="960.07" y="223.5" ></text>
</g>
<g >
<title>os.linux.openat (3,776,235,976 samples, 15.44%)</title><rect x="789.0" y="341" width="182.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="792.03" y="351.5" >os.linux.openat</text>
</g>
<g >
<title>migrate_enable (13,488,308 samples, 0.06%)</title><rect x="883.7" y="133" width="0.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="886.70" y="143.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (1,464,831,833 samples, 5.99%)</title><rect x="137.1" y="405" width="70.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="140.12" y="415.5" >compile..</text>
</g>
<g >
<title>build_open_flags (23,731,144 samples, 0.10%)</title><rect x="806.2" y="245" width="1.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="809.24" y="255.5" ></text>
</g>
<g >
<title>__slab_free (308,528,752 samples, 1.26%)</title><rect x="532.2" y="245" width="14.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="535.20" y="255.5" ></text>
</g>
<g >
<title>__fdget_pos (68,098,145 samples, 0.28%)</title><rect x="319.8" y="293" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="322.76" y="303.5" ></text>
</g>
<g >
<title>mem.isAligned (24,597,830 samples, 0.10%)</title><rect x="276.1" y="325" width="1.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="279.10" y="335.5" ></text>
</g>
<g >
<title>__ext4fs_dirhash (627,538,108 samples, 2.57%)</title><rect x="500.9" y="213" width="30.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="503.86" y="223.5" >__..</text>
</g>
<g >
<title>kmem_cache_free (24,218,926 samples, 0.10%)</title><rect x="809.3" y="133" width="1.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="812.28" y="143.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (11,396,733 samples, 0.05%)</title><rect x="888.2" y="181" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="891.16" y="191.5" ></text>
</g>
<g >
<title>inode_permission (46,386,378 samples, 0.19%)</title><rect x="885.4" y="197" width="2.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="888.44" y="207.5" ></text>
</g>
<g >
<title>copy_from_kernel_nofault_allowed (21,806,889 samples, 0.09%)</title><rect x="880.2" y="101" width="1.0" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="883.18" y="111.5" ></text>
</g>
<g >
<title>inode_query_iversion (78,861,398 samples, 0.32%)</title><rect x="550.0" y="261" width="3.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="552.95" y="271.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (21,691,187 samples, 0.09%)</title><rect x="234.2" y="373" width="1.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="237.20" y="383.5" ></text>
</g>
<g >
<title>mem.isAligned (4,750,378 samples, 0.02%)</title><rect x="297.2" y="341" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="300.19" y="351.5" ></text>
</g>
<g >
<title>verify_dirent_name (18,067,909 samples, 0.07%)</title><rect x="374.5" y="229" width="0.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="377.46" y="239.5" ></text>
</g>
<g >
<title>strncpy_from_user (154,327,167 samples, 0.63%)</title><rect x="955.9" y="229" width="7.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="958.89" y="239.5" ></text>
</g>
<g >
<title>hook_file_alloc_security (21,011,314 samples, 0.09%)</title><rect x="822.9" y="165" width="1.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="825.89" y="175.5" ></text>
</g>
<g >
<title>update_curr (11,396,733 samples, 0.05%)</title><rect x="888.2" y="37" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="891.16" y="47.5" ></text>
</g>
<g >
<title>posix.errno__anon_7457 (49,927,598 samples, 0.20%)</title><rect x="971.3" y="341" width="2.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="974.27" y="351.5" ></text>
</g>
<g >
<title>generic_permission (23,787,343 samples, 0.10%)</title><rect x="886.5" y="181" width="1.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="889.53" y="191.5" ></text>
</g>
<g >
<title>alloc_empty_file (527,065,095 samples, 2.16%)</title><rect x="816.2" y="213" width="25.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="819.20" y="223.5" >a..</text>
</g>
<g >
<title>tick_sched_timer (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="293" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1025.76" y="303.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (10,466,661 samples, 0.04%)</title><rect x="308.5" y="309" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="311.53" y="319.5" ></text>
</g>
<g >
<title>scheduler_tick (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="245" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1025.76" y="255.5" ></text>
</g>
<g >
<title>debug.assert (43,499,084 samples, 0.18%)</title><rect x="274.0" y="309" width="2.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="277.00" y="319.5" ></text>
</g>
<g >
<title>fs.Dir.Walker.next (19,800,795,780 samples, 80.98%)</title><rect x="37.6" y="421" width="955.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="40.64" y="431.5" >fs.Dir.Walker.next</text>
</g>
<g >
<title>start.callMainWithArgs (24,150,294,503 samples, 98.77%)</title><rect x="24.5" y="485" width="1165.5" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="27.52" y="495.5" >start.callMainWithArgs</text>
</g>
<g >
<title>security_inode_permission (21,327,195 samples, 0.09%)</title><rect x="887.7" y="197" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="890.68" y="207.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (10,167,781 samples, 0.04%)</title><rect x="63.8" y="405" width="0.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="66.81" y="415.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (193,942,829 samples, 0.79%)</title><rect x="484.1" y="197" width="9.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="487.08" y="207.5" ></text>
</g>
<g >
<title>mem.eqlBytes (45,658,695 samples, 0.19%)</title><rect x="1023.4" y="373" width="2.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1026.39" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (10,466,661 samples, 0.04%)</title><rect x="308.5" y="341" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="311.53" y="351.5" ></text>
</g>
<g >
<title>__fsnotify_parent (13,704,652 samples, 0.06%)</title><rect x="328.5" y="277" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="331.48" y="287.5" ></text>
</g>
<g >
<title>perf_event_task_tick (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="229" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1025.76" y="239.5" ></text>
</g>
<g >
<title>mem.eql__anon_5137 (21,781,088 samples, 0.09%)</title><rect x="999.2" y="389" width="1.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1002.20" y="399.5" ></text>
</g>
<g >
<title>__ext4_check_dir_entry (310,437,861 samples, 1.27%)</title><rect x="386.4" y="229" width="15.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="389.41" y="239.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (60,405,239 samples, 0.25%)</title><rect x="1187.1" y="373" width="2.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1190.08" y="383.5" ></text>
</g>
<g >
<title>math.isPowerOfTwo__anon_9010 (24,597,830 samples, 0.10%)</title><rect x="276.1" y="261" width="1.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="279.10" y="271.5" ></text>
</g>
<g >
<title>xas_start (61,832,147 samples, 0.25%)</title><rect x="450.1" y="101" width="3.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="453.07" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (113,100,624 samples, 0.46%)</title><rect x="309.0" y="341" width="5.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="312.03" y="351.5" ></text>
</g>
<g >
<title>ext4_htree_store_dirent (467,537,504 samples, 1.91%)</title><rect x="475.3" y="229" width="22.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="478.31" y="239.5" >e..</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).appendSliceAssumeCapacity (75,883,700 samples, 0.31%)</title><rect x="74.1" y="405" width="3.7" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="77.13" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (967,399,555 samples, 3.96%)</title><rect x="627.9" y="341" width="46.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="630.93" y="351.5" >entr..</text>
</g>
<g >
<title>_raw_spin_lock (8,139,649 samples, 0.03%)</title><rect x="660.2" y="277" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="663.16" y="287.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (13,458,094 samples, 0.06%)</title><rect x="24.5" y="437" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="27.52" y="447.5" ></text>
</g>
<g >
<title>rb_next_postorder (39,898,863 samples, 0.16%)</title><rect x="548.0" y="245" width="2.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="551.03" y="255.5" ></text>
</g>
<g >
<title>update_process_times (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="261" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1025.76" y="271.5" ></text>
</g>
<g >
<title>enqueue_task (11,396,733 samples, 0.05%)</title><rect x="888.2" y="85" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="891.16" y="95.5" ></text>
</g>
<g >
<title>debug.assert (15,278,727 samples, 0.06%)</title><rect x="266.3" y="325" width="0.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="269.25" y="335.5" ></text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (90,338,118 samples, 0.37%)</title><rect x="884.3" y="213" width="4.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="887.35" y="223.5" ></text>
</g>
<g >
<title>rcu_do_batch (24,218,926 samples, 0.10%)</title><rect x="809.3" y="149" width="1.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="812.28" y="159.5" ></text>
</g>
<g >
<title>__check_heap_object (19,473,090 samples, 0.08%)</title><rect x="961.1" y="197" width="0.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="964.10" y="207.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (103,434,132 samples, 0.42%)</title><rect x="10.0" y="501" width="5.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (32,445,410 samples, 0.13%)</title><rect x="840.1" y="181" width="1.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="843.07" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_free (70,458,438 samples, 0.29%)</title><rect x="963.3" y="245" width="3.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="966.33" y="255.5" ></text>
</g>
<g >
<title>copy_from_kernel_nofault (34,132,389 samples, 0.14%)</title><rect x="879.6" y="117" width="1.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="882.59" y="127.5" ></text>
</g>
<g >
<title>dx_probe (23,208,846 samples, 0.09%)</title><rect x="377.2" y="245" width="1.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="380.17" y="255.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (29,858,624 samples, 0.12%)</title><rect x="466.0" y="133" width="1.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="468.97" y="143.5" ></text>
</g>
<g >
<title>mem.indexOfSentinel__anon_8615 (696,035,505 samples, 2.85%)</title><rect x="263.6" y="341" width="33.6" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="266.60" y="351.5" >me..</text>
</g>
<g >
<title>fsnotify (142,871,465 samples, 0.58%)</title><rect x="861.4" y="181" width="6.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="864.42" y="191.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (50,294,325 samples, 0.21%)</title><rect x="967.8" y="261" width="2.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="970.81" y="271.5" ></text>
</g>
<g >
<title>ext4_getblk (23,208,846 samples, 0.09%)</title><rect x="377.2" y="197" width="1.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="380.17" y="207.5" ></text>
</g>
<g >
<title>bpf_lsm_file_open (229,912,420 samples, 0.94%)</title><rect x="873.3" y="181" width="11.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="876.25" y="191.5" ></text>
</g>
<g >
<title>alloc_fd (112,331,596 samples, 0.46%)</title><rect x="800.8" y="245" width="5.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="803.82" y="255.5" ></text>
</g>
<g >
<title>__kmalloc (237,811,546 samples, 0.97%)</title><rect x="483.0" y="213" width="11.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="485.99" y="223.5" ></text>
</g>
<g >
<title>rcu_do_batch (10,466,661 samples, 0.04%)</title><rect x="308.5" y="261" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="311.53" y="271.5" ></text>
</g>
<g >
<title>touch_atime (143,500,356 samples, 0.59%)</title><rect x="577.4" y="277" width="7.0" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="580.43" y="287.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (105,451,845 samples, 0.43%)</title><rect x="668.5" y="309" width="5.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="671.54" y="319.5" ></text>
</g>
<g >
<title>mem.lenSliceTo__anon_8499 (741,744,874 samples, 3.03%)</title><rect x="262.2" y="357" width="35.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="265.18" y="367.5" >mem..</text>
</g>
<g >
<title>hrtimer_interrupt (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="325" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1025.76" y="335.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (36,747,007 samples, 0.15%)</title><rect x="76.0" y="389" width="1.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="79.02" y="399.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (10,466,661 samples, 0.04%)</title><rect x="308.5" y="325" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="311.53" y="335.5" ></text>
</g>
<g >
<title>xas_descend (138,176,978 samples, 0.57%)</title><rect x="443.4" y="101" width="6.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="446.41" y="111.5" ></text>
</g>
<g >
<title>__put_user_8 (45,795,858 samples, 0.19%)</title><rect x="323.0" y="293" width="2.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="326.05" y="303.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (18,029,535 samples, 0.07%)</title><rect x="867.4" y="133" width="0.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="870.45" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_getdents64 (5,798,986,989 samples, 23.72%)</title><rect x="317.5" y="309" width="279.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="320.52" y="319.5" >__x64_sys_getdents64</text>
</g>
<g >
<title>__kmem_cache_alloc_node (116,599,247 samples, 0.48%)</title><rect x="559.6" y="245" width="5.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="562.62" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock (116,948,815 samples, 0.48%)</title><rect x="453.1" y="149" width="5.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="456.06" y="159.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (96,492,892 samples, 0.39%)</title><rect x="669.0" y="293" width="4.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="671.97" y="303.5" ></text>
</g>
<g >
<title>ext4_readdir (4,866,627,016 samples, 19.90%)</title><rect x="334.0" y="277" width="234.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="337.04" y="287.5" >ext4_readdir</text>
</g>
<g >
<title>syscall_exit_to_user_mode (50,294,325 samples, 0.21%)</title><rect x="967.8" y="277" width="2.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="970.81" y="287.5" ></text>
</g>
<g >
<title>[unknown] (300,823,673 samples, 1.23%)</title><rect x="10.0" y="517" width="14.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>dnotify_flush (63,375,893 samples, 0.26%)</title><rect x="661.5" y="277" width="3.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="664.51" y="287.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (37,999,222 samples, 0.16%)</title><rect x="22.7" y="501" width="1.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="25.68" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (17,100,860 samples, 0.07%)</title><rect x="21.9" y="485" width="0.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="24.86" y="495.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (60,739,616 samples, 0.25%)</title><rect x="974.1" y="373" width="3.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="977.13" y="383.5" ></text>
</g>
<g >
<title>memchr (9,078,222 samples, 0.04%)</title><rect x="374.9" y="213" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="377.89" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,098,917,752 samples, 24.94%)</title><rect x="314.5" y="341" width="294.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="317.49" y="351.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__memset (11,712,150 samples, 0.05%)</title><rect x="563.8" y="229" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="566.79" y="239.5" ></text>
</g>
<g >
<title>security_file_free (23,431,732 samples, 0.10%)</title><rect x="658.1" y="277" width="1.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="661.09" y="287.5" ></text>
</g>
<g >
<title>locks_remove_posix (82,233,601 samples, 0.34%)</title><rect x="664.6" y="277" width="3.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="667.57" y="287.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (11,396,733 samples, 0.05%)</title><rect x="888.2" y="149" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="891.16" y="159.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (47,735,445 samples, 0.20%)</title><rect x="256.1" y="373" width="2.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="259.06" y="383.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (15,718,092 samples, 0.06%)</title><rect x="677.6" y="373" width="0.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="680.58" y="383.5" ></text>
</g>
<g >
<title>ext4_sb_block_valid (167,487,391 samples, 0.68%)</title><rect x="459.3" y="149" width="8.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="462.33" y="159.5" ></text>
</g>
<g >
<title>file_free_rcu (10,466,661 samples, 0.04%)</title><rect x="308.5" y="245" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="311.53" y="255.5" ></text>
</g>
<g >
<title>getname_flags.part.0 (367,160,568 samples, 1.50%)</title><rect x="945.6" y="245" width="17.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="948.61" y="255.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (24,585,384 samples, 0.10%)</title><rect x="825.8" y="149" width="1.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="828.84" y="159.5" ></text>
</g>
<g >
<title>os.linux.errnoFromSyscall (20,188,790 samples, 0.08%)</title><rect x="298.0" y="373" width="1.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="300.98" y="383.5" ></text>
</g>
<g >
<title>ext4_htree_fill_tree (3,228,764,025 samples, 13.20%)</title><rect x="375.3" y="261" width="155.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="378.33" y="271.5" >ext4_htree_fill_tree</text>
</g>
<g >
<title>valgrind.doClientRequest (117,231,177 samples, 0.48%)</title><rect x="268.3" y="277" width="5.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="271.35" y="287.5" ></text>
</g>
<g >
<title>filp_flush (145,609,494 samples, 0.60%)</title><rect x="661.5" y="293" width="7.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="664.51" y="303.5" ></text>
</g>
<g >
<title>__kmem_cache_free (30,694,665 samples, 0.13%)</title><rect x="641.1" y="261" width="1.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="644.08" y="271.5" ></text>
</g>
<g >
<title>x64_sys_call (22,950,876 samples, 0.09%)</title><rect x="607.7" y="309" width="1.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="610.71" y="319.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (24,218,926 samples, 0.10%)</title><rect x="809.3" y="213" width="1.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="812.28" y="223.5" ></text>
</g>
<g >
<title>x64_sys_call (20,534,034 samples, 0.08%)</title><rect x="673.6" y="309" width="1.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="676.63" y="319.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (18,483,259 samples, 0.08%)</title><rect x="564.4" y="229" width="0.8" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="567.36" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (19,833,389 samples, 0.08%)</title><rect x="660.6" y="277" width="0.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="663.56" y="287.5" ></text>
</g>
<g >
<title>iterate_dir (5,550,345,536 samples, 22.70%)</title><rect x="325.3" y="293" width="267.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="328.26" y="303.5" >iterate_dir</text>
</g>
<g >
<title>os.linux.close (1,136,992,535 samples, 4.65%)</title><rect x="622.7" y="373" width="54.9" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="625.71" y="383.5" >os.li..</text>
</g>
<g >
<title>__virt_addr_valid (26,786,116 samples, 0.11%)</title><rect x="962.0" y="197" width="1.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="965.04" y="207.5" ></text>
</g>
<g >
<title>search_name_runner.main (24,150,294,503 samples, 98.77%)</title><rect x="24.5" y="453" width="1165.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="27.52" y="463.5" >search_name_runner.main</text>
</g>
<g >
<title>security_inode_permission (18,483,357 samples, 0.08%)</title><rect x="928.6" y="197" width="0.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="931.63" y="207.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOneAssumeCapacity (51,817,412 samples, 0.21%)</title><rect x="71.6" y="389" width="2.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="74.63" y="399.5" ></text>
</g>
<g >
<title>__rcu_read_lock (25,431,611 samples, 0.10%)</title><rect x="876.3" y="117" width="1.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="879.35" y="127.5" ></text>
</g>
<g >
<title>fd_install (84,606,777 samples, 0.35%)</title><rect x="941.0" y="245" width="4.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="944.05" y="255.5" ></text>
</g>
<g >
<title>fs.Dir.openDirFlagsZ (4,021,307,746 samples, 16.45%)</title><rect x="779.6" y="373" width="194.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="782.61" y="383.5" >fs.Dir.openDirFlagsZ</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (19,763,294 samples, 0.08%)</title><rect x="674.6" y="341" width="1.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="677.62" y="351.5" ></text>
</g>
<g >
<title>is_dx_dir (121,526,999 samples, 0.50%)</title><rect x="553.8" y="261" width="5.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="556.76" y="271.5" ></text>
</g>
<g >
<title>mem.eqlBytes (2,685,724,125 samples, 10.98%)</title><rect x="1035.6" y="357" width="129.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1038.63" y="367.5" >mem.eqlBytes</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (18,029,535 samples, 0.07%)</title><rect x="867.4" y="149" width="0.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="870.45" y="159.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall1 (1,119,659,917 samples, 4.58%)</title><rect x="623.5" y="357" width="54.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="626.54" y="367.5" >os.li..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="373" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1025.76" y="383.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall3 (6,479,081,641 samples, 26.50%)</title><rect x="300.0" y="357" width="312.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="303.00" y="367.5" >os.linux.x86_64.syscall3</text>
</g>
<g >
<title>generic_permission (18,391,268 samples, 0.08%)</title><rect x="927.7" y="181" width="0.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="930.74" y="191.5" ></text>
</g>
<g >
<title>rcu_core (24,218,926 samples, 0.10%)</title><rect x="809.3" y="165" width="1.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="812.28" y="175.5" ></text>
</g>
<g >
<title>handle_softirqs (10,466,661 samples, 0.04%)</title><rect x="308.5" y="293" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="311.53" y="303.5" ></text>
</g>
<g >
<title>bpf_lsm_file_alloc_security (24,877,093 samples, 0.10%)</title><rect x="821.7" y="165" width="1.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="824.69" y="175.5" ></text>
</g>
<g >
<title>__fget_light (67,570,667 samples, 0.28%)</title><rect x="931.8" y="197" width="3.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="934.84" y="207.5" ></text>
</g>
<g >
<title>free_rb_tree_fname (389,625,966 samples, 1.59%)</title><rect x="531.1" y="261" width="18.9" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="534.15" y="271.5" ></text>
</g>
<g >
<title>security_file_alloc (145,096,523 samples, 0.59%)</title><rect x="820.0" y="181" width="7.0" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="823.03" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (46,154,114 samples, 0.19%)</title><rect x="786.8" y="309" width="2.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="789.81" y="319.5" ></text>
</g>
<g >
<title>start.callMain (24,150,294,503 samples, 98.77%)</title><rect x="24.5" y="469" width="1165.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="27.52" y="479.5" >start.callMain</text>
</g>
<g >
<title>search_name.SearchIterator.next (24,136,836,409 samples, 98.71%)</title><rect x="25.2" y="437" width="1164.8" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="28.17" y="447.5" >search_name.SearchIterator.next</text>
</g>
<g >
<title>syscall_return_via_sysret (21,360,770 samples, 0.09%)</title><rect x="970.2" y="309" width="1.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="973.24" y="319.5" ></text>
</g>
<g >
<title>try_to_wake_up (11,396,733 samples, 0.05%)</title><rect x="888.2" y="117" width="0.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="891.16" y="127.5" ></text>
</g>
<g >
<title>__fget_light (45,796,302 samples, 0.19%)</title><rect x="320.8" y="277" width="2.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="323.84" y="287.5" ></text>
</g>
<g >
<title>fs.Dir.openDir (6,270,852,283 samples, 25.65%)</title><rect x="690.0" y="405" width="302.6" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="693.02" y="415.5" >fs.Dir.openDir</text>
</g>
<g >
<title>fs.Dir.close (1,389,076,119 samples, 5.68%)</title><rect x="615.0" y="405" width="67.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="618.02" y="415.5" >fs.Dir...</text>
</g>
<g >
<title>kmem_cache_alloc (302,739,526 samples, 1.24%)</title><rect x="827.0" y="197" width="14.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="830.03" y="207.5" ></text>
</g>
<g >
<title>__memcpy (12,469,185 samples, 0.05%)</title><rect x="494.5" y="213" width="0.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="497.47" y="223.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).ensureTotalCapacity (13,562,525 samples, 0.06%)</title><rect x="57.0" y="373" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="60.04" y="383.5" ></text>
</g>
<g >
<title>valgrind.doClientRequest (14,586,202 samples, 0.06%)</title><rect x="267.6" y="293" width="0.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="270.64" y="303.5" ></text>
</g>
<g >
<title>__find_get_block (1,164,964,498 samples, 4.76%)</title><rect x="402.5" y="165" width="56.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="405.48" y="175.5" >__fin..</text>
</g>
<g >
<title>fs.Dir.openDirZ (11,895,497 samples, 0.05%)</title><rect x="992.6" y="405" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="995.64" y="415.5" ></text>
</g>
<g >
<title>fs.Dir.Iterator__struct_3782.nextLinux (8,281,352,909 samples, 33.87%)</title><rect x="213.0" y="389" width="399.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="216.03" y="399.5" >fs.Dir.Iterator__struct_3782.nextLinux</text>
</g>
<g >
<title>ktime_get_update_offsets_now (18,029,535 samples, 0.07%)</title><rect x="867.4" y="101" width="0.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="870.45" y="111.5" ></text>
</g>
<g >
<title>rb_insert_color (58,136,221 samples, 0.24%)</title><rect x="495.1" y="213" width="2.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="498.07" y="223.5" ></text>
</g>
<g >
<title>fsnotify (13,704,652 samples, 0.06%)</title><rect x="328.5" y="261" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="331.48" y="271.5" ></text>
</g>
<g >
<title>[unknown] (46,154,114 samples, 0.19%)</title><rect x="786.8" y="341" width="2.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="789.81" y="351.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).pop (126,600,186 samples, 0.52%)</title><rect x="57.7" y="405" width="6.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="60.70" y="415.5" ></text>
</g>
<g >
<title>debug.assert (1,175,841,228 samples, 4.81%)</title><rect x="79.3" y="389" width="56.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="82.32" y="399.5" >debug...</text>
</g>
<g >
<title>ext4fs_dirhash (689,469,288 samples, 2.82%)</title><rect x="497.9" y="229" width="33.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="500.88" y="239.5" >ex..</text>
</g>
<g >
<title>fsnotify (55,127,236 samples, 0.23%)</title><rect x="574.8" y="261" width="2.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="577.77" y="271.5" ></text>
</g>
<g >
<title>path_openat (2,706,107,445 samples, 11.07%)</title><rect x="810.5" y="229" width="130.5" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="813.45" y="239.5" >path_openat</text>
</g>
<g >
<title>fsnotify (109,451,216 samples, 0.45%)</title><rect x="568.9" y="277" width="5.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="571.91" y="287.5" ></text>
</g>
<g >
<title>tick_sched_handle (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="277" width="0.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1025.76" y="287.5" ></text>
</g>
<g >
<title>all (24,451,118,176 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (18,029,535 samples, 0.07%)</title><rect x="867.4" y="165" width="0.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="870.45" y="175.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (61,438,103 samples, 0.25%)</title><rect x="837.1" y="181" width="3.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="840.11" y="191.5" ></text>
</g>
<g >
<title>math.isPowerOfTwo__anon_8146 (43,499,084 samples, 0.18%)</title><rect x="274.0" y="325" width="2.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="277.00" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (34,350,944 samples, 0.14%)</title><rect x="13.3" y="485" width="1.7" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="16.33" y="495.5" ></text>
</g>
<g >
<title>mem.eqlBytes (57,942,379 samples, 0.24%)</title><rect x="238.0" y="357" width="2.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="241.02" y="367.5" ></text>
</g>
<g >
<title>ttwu_do_activate (11,396,733 samples, 0.05%)</title><rect x="888.2" y="101" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="891.16" y="111.5" ></text>
</g>
<g >
<title>posix.errno__anon_7457 (77,011,712 samples, 0.31%)</title><rect x="678.3" y="373" width="3.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="681.34" y="383.5" ></text>
</g>
<g >
<title>fs.Dir.openDirZ (4,120,572,012 samples, 16.85%)</title><rect x="774.8" y="389" width="198.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="777.82" y="399.5" >fs.Dir.openDirZ</text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (418,504,392 samples, 1.71%)</title><rect x="1165.2" y="357" width="20.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1168.24" y="367.5" ></text>
</g>
<g >
<title>mem.indexOfScalarPos__anon_7261 (322,863,313 samples, 1.32%)</title><rect x="977.1" y="357" width="15.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="980.06" y="367.5" ></text>
</g>
<g >
<title>inode_permission (33,624,398 samples, 0.14%)</title><rect x="927.0" y="197" width="1.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="930.00" y="207.5" ></text>
</g>
<g >
<title>lockref_get (65,756,061 samples, 0.27%)</title><rect x="868.3" y="197" width="3.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="871.32" y="207.5" ></text>
</g>
<g >
<title>start._start (24,150,294,503 samples, 98.77%)</title><rect x="24.5" y="517" width="1165.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="27.52" y="527.5" >start._start</text>
</g>
<g >
<title>valgrind.runningOnValgrind (17,765,629 samples, 0.07%)</title><rect x="991.8" y="325" width="0.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="994.79" y="335.5" ></text>
</g>
<g >
<title>free_rb_tree_fname (211,960,261 samples, 0.87%)</title><rect x="642.6" y="261" width="10.2" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="645.56" y="271.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall3 (159,390,319 samples, 0.65%)</title><rect x="15.0" y="501" width="7.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="17.99" y="511.5" ></text>
</g>
<g >
<title>putname (22,385,633 samples, 0.09%)</title><rect x="966.7" y="245" width="1.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="969.73" y="255.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (27,048,116 samples, 0.11%)</title><rect x="688.7" y="373" width="1.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="691.71" y="383.5" ></text>
</g>
<g >
<title>os.linux.getdents64 (6,500,845,972 samples, 26.59%)</title><rect x="299.0" y="373" width="313.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="301.95" y="383.5" >os.linux.getdents64</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="357" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1025.76" y="367.5" ></text>
</g>
<g >
<title>cache_from_obj (17,052,916 samples, 0.07%)</title><rect x="965.9" y="229" width="0.8" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="968.91" y="239.5" ></text>
</g>
<g >
<title>bpf_get_current_cgroup_id (53,582,539 samples, 0.22%)</title><rect x="875.0" y="133" width="2.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="877.99" y="143.5" ></text>
</g>
<g >
<title>fsnotify_grab_connector (25,001,026 samples, 0.10%)</title><rect x="663.4" y="245" width="1.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="666.37" y="255.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).addOneAssumeCapacity (33,490,998 samples, 0.14%)</title><rect x="55.4" y="373" width="1.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="58.43" y="383.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (51,062,758 samples, 0.21%)</title><rect x="881.2" y="133" width="2.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="884.23" y="143.5" ></text>
</g>
<g >
<title>__rcu_read_lock (10,069,096 samples, 0.04%)</title><rect x="657.1" y="261" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="660.12" y="271.5" ></text>
</g>
<g >
<title>valgrind.doClientRequestExpr (13,529,700 samples, 0.06%)</title><rect x="267.0" y="309" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="269.99" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_close (828,492,419 samples, 3.39%)</title><rect x="628.6" y="309" width="39.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="631.56" y="319.5" >__x..</text>
</g>
<g >
<title>___slab_alloc (44,970,425 samples, 0.18%)</title><rect x="829.1" y="181" width="2.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="832.10" y="191.5" ></text>
</g>
<g >
<title>get_unused_fd_flags (10,033,548 samples, 0.04%)</title><rect x="945.1" y="245" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="948.13" y="255.5" ></text>
</g>
<g >
<title>__memset (108,602,193 samples, 0.44%)</title><rect x="950.6" y="213" width="5.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="953.64" y="223.5" ></text>
</g>
<g >
<title>mod_objcg_state (10,475,019 samples, 0.04%)</title><rect x="839.6" y="165" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="842.57" y="175.5" ></text>
</g>
<g >
<title>filemap_get_entry (451,342,445 samples, 1.85%)</title><rect x="431.3" y="133" width="21.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="434.28" y="143.5" >f..</text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (46,154,114 samples, 0.19%)</title><rect x="786.8" y="325" width="2.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="789.81" y="335.5" ></text>
</g>
<g >
<title>ext4_release_dir (262,407,151 samples, 1.07%)</title><rect x="640.1" y="277" width="12.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="643.13" y="287.5" ></text>
</g>
<g >
<title>mntget (9,459,234 samples, 0.04%)</title><rect x="872.7" y="181" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="875.69" y="191.5" ></text>
</g>
<g >
<title>debug.inValgrind (17,765,629 samples, 0.07%)</title><rect x="991.8" y="341" width="0.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="994.79" y="351.5" ></text>
</g>
<g >
<title>atime_needs_update (76,598,929 samples, 0.31%)</title><rect x="580.7" y="261" width="3.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="583.66" y="271.5" ></text>
</g>
<g >
<title>dput (12,138,515 samples, 0.05%)</title><rect x="639.5" y="277" width="0.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="642.54" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,642,890,838 samples, 14.90%)</title><rect x="794.4" y="293" width="175.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="797.44" y="303.5" >do_syscall_64</text>
</g>
<g >
<title>enqueue_task_fair (11,396,733 samples, 0.05%)</title><rect x="888.2" y="69" width="0.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="891.16" y="79.5" ></text>
</g>
<g >
<title>mem.sliceAsBytes__anon_7771 (293,516,510 samples, 1.20%)</title><rect x="240.8" y="357" width="14.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="243.82" y="367.5" ></text>
</g>
<g >
<title>__bpf_prog_exit (13,488,308 samples, 0.06%)</title><rect x="883.7" y="149" width="0.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="886.70" y="159.5" ></text>
</g>
<g >
<title>__srcu_read_lock (12,752,104 samples, 0.05%)</title><rect x="663.4" y="229" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="666.37" y="239.5" ></text>
</g>
<g >
<title>[[x_tables]] (229,912,420 samples, 0.94%)</title><rect x="873.3" y="165" width="11.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="876.25" y="175.5" ></text>
</g>
<g >
<title>__getblk_gfp (23,208,846 samples, 0.09%)</title><rect x="377.2" y="181" width="1.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="380.17" y="191.5" ></text>
</g>
<g >
<title>__ext4_read_dirblock (23,208,846 samples, 0.09%)</title><rect x="377.2" y="229" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="380.17" y="239.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (212,833,401 samples, 0.87%)</title><rect x="945.6" y="229" width="10.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="948.61" y="239.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (24,218,926 samples, 0.10%)</title><rect x="809.3" y="197" width="1.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="812.28" y="207.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (163,678,396 samples, 0.67%)</title><rect x="467.4" y="165" width="7.9" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="470.41" y="175.5" ></text>
</g>
<g >
<title>mem.alignBackward__anon_8551 (24,597,830 samples, 0.10%)</title><rect x="276.1" y="293" width="1.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="279.10" y="303.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (41,509,287 samples, 0.17%)</title><rect x="675.6" y="341" width="2.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="678.58" y="351.5" ></text>
</g>
<g >
<title>lookup_fast (770,578,079 samples, 3.15%)</title><rect x="888.7" y="213" width="37.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="891.71" y="223.5" >loo..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (37,999,222 samples, 0.16%)</title><rect x="22.7" y="485" width="1.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="25.68" y="495.5" ></text>
</g>
<g >
<title>__rcu_read_lock (10,138,010 samples, 0.04%)</title><rect x="836.6" y="149" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="839.62" y="159.5" ></text>
</g>
<g >
<title>up_read (181,454,926 samples, 0.74%)</title><rect x="584.4" y="277" width="8.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="587.36" y="287.5" ></text>
</g>
<g >
<title>__fput (462,291,441 samples, 1.89%)</title><rect x="636.9" y="293" width="22.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="639.91" y="303.5" >_..</text>
</g>
<g >
<title>array_list.addOrOom (21,887,288 samples, 0.09%)</title><rect x="136.1" y="405" width="1.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="139.06" y="415.5" ></text>
</g>
<g >
<title>mem.isAlignedGeneric__anon_7754 (24,597,830 samples, 0.10%)</title><rect x="276.1" y="309" width="1.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="279.10" y="319.5" ></text>
</g>
<g >
<title>__rcu_read_lock (24,953,148 samples, 0.10%)</title><rect x="440.3" y="117" width="1.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="443.27" y="127.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (64,698,433 samples, 0.26%)</title><rect x="823.9" y="165" width="3.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="826.91" y="175.5" ></text>
</g>
<g >
<title>_raw_read_unlock (36,302,711 samples, 0.15%)</title><rect x="473.6" y="149" width="1.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="476.56" y="159.5" ></text>
</g>
<g >
<title>htree_dirblock_to_tree (3,167,419,977 samples, 12.95%)</title><rect x="378.3" y="245" width="152.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="381.29" y="255.5" >htree_dirblock_to_t..</text>
</g>
<g >
<title>security_file_open (232,196,392 samples, 0.95%)</title><rect x="873.1" y="197" width="11.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="876.14" y="207.5" ></text>
</g>
<g >
<title>__find_get_block (23,208,846 samples, 0.09%)</title><rect x="377.2" y="165" width="1.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="380.17" y="175.5" ></text>
</g>
<g >
<title>mutex_unlock (88,336,639 samples, 0.36%)</title><rect x="593.1" y="293" width="4.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="596.12" y="303.5" ></text>
</g>
<g >
<title>valgrind.runningOnValgrind (131,817,379 samples, 0.54%)</title><rect x="267.6" y="309" width="6.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="270.64" y="319.5" ></text>
</g>
<g >
<title>os.linux.x86_64.syscall4 (3,724,498,084 samples, 15.23%)</title><rect x="791.5" y="325" width="179.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="794.53" y="335.5" >os.linux.x86_64.syscall4</text>
</g>
<g >
<title>get_partial_node.part.0 (22,339,505 samples, 0.09%)</title><rect x="830.2" y="165" width="1.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="833.19" y="175.5" ></text>
</g>
<g >
<title>mem.indexOfPosLinear__anon_7770 (3,931,742,920 samples, 16.08%)</title><rect x="1000.3" y="389" width="189.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1003.26" y="399.5" >mem.indexOfPosLinear__an..</text>
</g>
<g >
<title>fs.Dir.Iterator__struct_3782.nextLinux (21,673,671 samples, 0.09%)</title><rect x="614.0" y="405" width="1.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="616.97" y="415.5" ></text>
</g>
<g >
<title>kfree (19,446,501 samples, 0.08%)</title><rect x="547.1" y="245" width="0.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="550.09" y="255.5" ></text>
</g>
<g >
<title>locks_remove_file (21,844,505 samples, 0.09%)</title><rect x="656.1" y="277" width="1.0" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="659.07" y="287.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(fs.Dir.Walker.StackItem,null).append (106,370,820 samples, 0.44%)</title><rect x="52.6" y="405" width="5.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="55.57" y="415.5" ></text>
</g>
<g >
<title>simd.firstTrue__anon_8148 (11,517,138 samples, 0.05%)</title><rect x="297.4" y="341" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="300.42" y="351.5" ></text>
</g>
<g >
<title>rcu_async_should_hurry (24,550,107 samples, 0.10%)</title><rect x="635.7" y="277" width="1.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="638.72" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (69,083,188 samples, 0.28%)</title><rect x="10.0" y="485" width="3.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>compiler_rt.memset.memset (570,441,910 samples, 2.33%)</title><rect x="747.3" y="389" width="27.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="750.30" y="399.5" >c..</text>
</g>
<g >
<title>slab_update_freelist.isra.0 (279,498,044 samples, 1.14%)</title><rect x="533.6" y="229" width="13.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="536.60" y="239.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (726,239,135 samples, 2.97%)</title><rect x="890.8" y="197" width="35.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="893.85" y="207.5" >__..</text>
</g>
<g >
<title>terminate_walk (58,204,246 samples, 0.24%)</title><rect x="937.3" y="213" width="2.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="940.35" y="223.5" ></text>
</g>
<g >
<title>do_dentry_open (780,110,694 samples, 3.19%)</title><rect x="846.7" y="213" width="37.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="849.70" y="223.5" >do_..</text>
</g>
<g >
<title>str2hashbuf_signed (242,141,939 samples, 0.99%)</title><rect x="519.5" y="197" width="11.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="522.46" y="207.5" ></text>
</g>
<g >
<title>__fput_sync (19,602,914 samples, 0.08%)</title><rect x="659.2" y="293" width="1.0" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="662.22" y="303.5" ></text>
</g>
<g >
<title>do_filp_open (2,769,693,896 samples, 11.33%)</title><rect x="807.4" y="245" width="133.6" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="810.38" y="255.5" >do_filp_open</text>
</g>
<g >
<title>down_read_killable (101,525,698 samples, 0.42%)</title><rect x="329.1" y="277" width="4.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="332.14" y="287.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (18,029,535 samples, 0.07%)</title><rect x="867.4" y="117" width="0.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="870.45" y="127.5" ></text>
</g>
<g >
<title>valgrind.doClientRequestExpr (117,231,177 samples, 0.48%)</title><rect x="268.3" y="293" width="5.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="271.35" y="303.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (11,396,733 samples, 0.05%)</title><rect x="888.2" y="165" width="0.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="891.16" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,665,371,291 samples, 14.99%)</title><rect x="793.4" y="309" width="176.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="796.35" y="319.5" >entry_SYSCALL_64_after..</text>
</g>
<g >
<title>dput (58,204,246 samples, 0.24%)</title><rect x="937.3" y="197" width="2.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="940.35" y="207.5" ></text>
</g>
<g >
<title>complete_walk (104,927,257 samples, 0.43%)</title><rect x="841.6" y="213" width="5.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="844.64" y="223.5" ></text>
</g>
<g >
<title>try_to_unlazy (104,927,257 samples, 0.43%)</title><rect x="841.6" y="197" width="5.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="844.64" y="207.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (1,186,907,470 samples, 4.85%)</title><rect x="690.0" y="389" width="57.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="693.02" y="399.5" >compil..</text>
</g>
<g >
<title>htab_map_hash (13,116,585 samples, 0.05%)</title><rect x="874.4" y="117" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="877.36" y="127.5" ></text>
</g>
<g >
<title>search_name_run (24,451,118,176 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >search_name_run</text>
</g>
<g >
<title>amd_clear_divider (21,583,012 samples, 0.09%)</title><rect x="599.2" y="293" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="602.22" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (24,218,926 samples, 0.10%)</title><rect x="809.3" y="229" width="1.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="812.28" y="239.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (42,549,520 samples, 0.17%)</title><rect x="211.0" y="389" width="2.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="213.97" y="399.5" ></text>
</g>
<g >
<title>___slab_alloc (12,298,355 samples, 0.05%)</title><rect x="490.2" y="181" width="0.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="493.16" y="191.5" ></text>
</g>
<g >
<title>posix.close (1,229,722,339 samples, 5.03%)</title><rect x="622.7" y="389" width="59.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="625.71" y="399.5" >posix...</text>
</g>
<g >
<title>ext4_map_blocks (344,195,787 samples, 1.41%)</title><rect x="458.7" y="181" width="16.6" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="461.70" y="191.5" ></text>
</g>
<g >
<title>mem.sliceTo__anon_7548 (820,857,697 samples, 3.36%)</title><rect x="258.4" y="373" width="39.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="261.36" y="383.5" >mem..</text>
</g>
<g >
<title>vfs_open (18,478,972 samples, 0.08%)</title><rect x="940.2" y="213" width="0.8" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="943.16" y="223.5" ></text>
</g>
<g >
<title>__kmem_cache_free (126,422,053 samples, 0.52%)</title><rect x="644.2" y="245" width="6.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="647.20" y="255.5" ></text>
</g>
<g >
<title>__getblk_gfp (1,164,964,498 samples, 4.76%)</title><rect x="402.5" y="181" width="56.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="405.48" y="191.5" >__get..</text>
</g>
<g >
<title>step_into (46,423,911 samples, 0.19%)</title><rect x="935.1" y="213" width="2.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="938.11" y="223.5" ></text>
</g>
<g >
<title>__brelse (23,527,706 samples, 0.10%)</title><rect x="385.3" y="229" width="1.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="388.28" y="239.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (38,234,916 samples, 0.16%)</title><rect x="597.4" y="309" width="1.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="600.38" y="319.5" ></text>
</g>
<g >
<title>posix.openatZ (3,980,198,396 samples, 16.28%)</title><rect x="781.6" y="357" width="192.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="784.60" y="367.5" >posix.openatZ</text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).shrinkRetainingCapacity (1,175,841,228 samples, 4.81%)</title><rect x="79.3" y="405" width="56.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="82.32" y="415.5" >array_..</text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (117,572,204 samples, 0.48%)</title><rect x="58.1" y="389" width="5.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="61.13" y="399.5" ></text>
</g>
<g >
<title>__filemap_get_folio (451,342,445 samples, 1.85%)</title><rect x="431.3" y="149" width="21.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="434.28" y="159.5" >_..</text>
</g>
<g >
<title>mem.indexOfScalar__anon_7187 (322,863,313 samples, 1.32%)</title><rect x="977.1" y="373" width="15.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="980.06" y="383.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="309" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1025.76" y="319.5" ></text>
</g>
<g >
<title>handle_softirqs (24,218,926 samples, 0.10%)</title><rect x="809.3" y="181" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="812.28" y="191.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).addOne (92,792,672 samples, 0.38%)</title><rect x="66.5" y="389" width="4.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="69.52" y="399.5" ></text>
</g>
<g >
<title>fsnotify_perm.part.0 (142,871,465 samples, 0.58%)</title><rect x="861.4" y="197" width="6.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="864.42" y="207.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (16,094,072 samples, 0.07%)</title><rect x="611.9" y="341" width="0.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="614.90" y="351.5" ></text>
</g>
<g >
<title>kmem_cache_free (45,062,846 samples, 0.18%)</title><rect x="653.9" y="277" width="2.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="656.89" y="287.5" ></text>
</g>
<g >
<title>fsnotify (22,875,548 samples, 0.09%)</title><rect x="652.8" y="277" width="1.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="655.79" y="287.5" ></text>
</g>
<g >
<title>lockref_put_return (36,274,914 samples, 0.15%)</title><rect x="938.4" y="181" width="1.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="941.40" y="191.5" ></text>
</g>
<g >
<title>do_sys_openat2 (3,512,485,730 samples, 14.37%)</title><rect x="798.3" y="261" width="169.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="801.30" y="271.5" >do_sys_openat2</text>
</g>
<g >
<title>_raw_spin_lock (21,599,347 samples, 0.09%)</title><rect x="805.2" y="229" width="1.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="808.20" y="239.5" ></text>
</g>
<g >
<title>mem.eqlBytes (12,017,503 samples, 0.05%)</title><rect x="235.2" y="373" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="238.24" y="383.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (175,878,703 samples, 0.72%)</title><rect x="599.2" y="309" width="8.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="602.22" y="319.5" ></text>
</g>
<g >
<title>array_list.ArrayListAlignedUnmanaged(u8,null).append (11,947,584 samples, 0.05%)</title><rect x="27.0" y="421" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="30.01" y="431.5" ></text>
</g>
<g >
<title>path_get (34,232,780 samples, 0.14%)</title><rect x="871.5" y="197" width="1.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="874.49" y="207.5" ></text>
</g>
<g >
<title>meta.hasUniqueRepresentation (34,118,053 samples, 0.14%)</title><rect x="1185.4" y="357" width="1.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1188.44" y="367.5" ></text>
</g>
<g >
<title>handle_softirqs (11,396,733 samples, 0.05%)</title><rect x="888.2" y="133" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="891.16" y="143.5" ></text>
</g>
<g >
<title>compiler_rt.stack_probe.zig_probe_stack (21,967,239 samples, 0.09%)</title><rect x="36.6" y="421" width="1.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="39.58" y="431.5" ></text>
</g>
<g >
<title>debug.inValgrind (145,347,079 samples, 0.59%)</title><rect x="267.0" y="325" width="7.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="269.99" y="335.5" ></text>
</g>
<g >
<title>kmalloc_trace (116,599,247 samples, 0.48%)</title><rect x="559.6" y="261" width="5.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="562.62" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (142,289,459 samples, 0.58%)</title><rect x="15.0" y="485" width="6.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="17.99" y="495.5" ></text>
</g>
<g >
<title>__get_obj_cgroup_from_memcg (59,215,697 samples, 0.24%)</title><rect x="834.2" y="165" width="2.9" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="837.25" y="175.5" ></text>
</g>
<g >
<title>mem.isValidAlignGeneric__anon_8703 (24,597,830 samples, 0.10%)</title><rect x="276.1" y="277" width="1.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="279.10" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,055,849,033 samples, 24.77%)</title><rect x="316.6" y="325" width="292.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="319.57" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>xas_load (240,087,026 samples, 0.98%)</title><rect x="441.5" y="117" width="11.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="444.47" y="127.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (12,893,097 samples, 0.05%)</title><rect x="1022.8" y="213" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1025.76" y="223.5" ></text>
</g>
<g >
<title>rcu_core (10,466,661 samples, 0.04%)</title><rect x="308.5" y="277" width="0.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="311.53" y="287.5" ></text>
</g>
<g >
<title>may_open (75,065,082 samples, 0.31%)</title><rect x="925.9" y="213" width="3.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="928.90" y="223.5" ></text>
</g>
<g >
<title>ext4_bread (1,509,160,285 samples, 6.17%)</title><rect x="402.5" y="213" width="72.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="405.48" y="223.5" >ext4_bread</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (63,886,666 samples, 0.26%)</title><rect x="608.8" y="341" width="3.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="611.82" y="351.5" ></text>
</g>
<g >
<title>__list_del_entry_valid_or_report (22,339,505 samples, 0.09%)</title><rect x="830.2" y="149" width="1.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="833.19" y="159.5" ></text>
</g>
<g >
<title>filldir64 (578,527,447 samples, 2.37%)</title><rect x="347.4" y="245" width="27.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="350.41" y="255.5" >f..</text>
</g>
<g >
<title>__memset (55,573,832 samples, 0.23%)</title><rect x="490.8" y="181" width="2.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="493.75" y="191.5" ></text>
</g>
<g >
<title>__htab_map_lookup_elem (13,116,585 samples, 0.05%)</title><rect x="874.4" y="133" width="0.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="877.36" y="143.5" ></text>
</g>
<g >
<title>ext4_bread (23,208,846 samples, 0.09%)</title><rect x="377.2" y="213" width="1.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="380.17" y="223.5" ></text>
</g>
<g >
<title>__legitimize_path (71,849,708 samples, 0.29%)</title><rect x="843.2" y="181" width="3.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="846.23" y="191.5" ></text>
</g>
<g >
<title>fsnotify_find_mark (25,001,026 samples, 0.10%)</title><rect x="663.4" y="261" width="1.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="666.37" y="271.5" ></text>
</g>
<g >
<title>_raw_read_lock (52,459,530 samples, 0.21%)</title><rect x="471.0" y="149" width="2.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="474.03" y="159.5" ></text>
</g>
<g >
<title>call_filldir (668,090,107 samples, 2.73%)</title><rect x="343.1" y="261" width="32.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="346.09" y="271.5" >ca..</text>
</g>
<g >
<title>lockref_get_not_dead (71,849,708 samples, 0.29%)</title><rect x="843.2" y="165" width="3.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="846.23" y="175.5" ></text>
</g>
<g >
<title>posix.toPosixPath (392,930,891 samples, 1.61%)</title><rect x="973.7" y="389" width="18.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="976.68" y="399.5" ></text>
</g>
<g >
<title>fsnotify (91,887,956 samples, 0.38%)</title><rect x="857.0" y="197" width="4.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="859.99" y="207.5" ></text>
</g>
<g >
<title>simd.firstTrue__anon_8148 (412,380,611 samples, 1.69%)</title><rect x="277.3" y="325" width="19.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="280.29" y="335.5" ></text>
</g>
<g >
<title>compiler_rt.memcpy.memcpy (137,939,173 samples, 0.56%)</title><rect x="682.1" y="389" width="6.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="685.05" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (954,478,298 samples, 3.90%)</title><rect x="628.6" y="325" width="46.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="631.56" y="335.5" >do_s..</text>
</g>
<g >
<title>__memset (43,232,615 samples, 0.18%)</title><rect x="831.3" y="181" width="2.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="834.27" y="191.5" ></text>
</g>
<g >
<title>fs.Dir.iterateAssumeFirstIteration (24,531,223 samples, 0.10%)</title><rect x="993.2" y="421" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="996.22" y="431.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (131,080,331 samples, 0.54%)</title><rect x="600.3" y="293" width="6.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="603.27" y="303.5" ></text>
</g>
<g >
<title>errseq_sample (73,388,995 samples, 0.30%)</title><rect x="853.4" y="197" width="3.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="856.45" y="207.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (45,041,102 samples, 0.18%)</title><rect x="456.5" y="133" width="2.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="459.53" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_openat (3,577,085,844 samples, 14.63%)</title><rect x="795.2" y="277" width="172.6" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="798.19" y="287.5" >__x64_sys_openat</text>
</g>
<g >
<title>bpf_probe_read_kernel (75,832,145 samples, 0.31%)</title><rect x="877.6" y="133" width="3.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="880.57" y="143.5" ></text>
</g>
</g>
</svg>
